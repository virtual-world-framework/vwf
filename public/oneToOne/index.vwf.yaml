# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

--- 
extends: http://vwf.example.com/cesium.vwf
properties:
  controlClient: "NONE"
  cameraControllerData:
  cameraViewData: 
  imageryProvider: "bingAerial"
  backgroundColor: [ 0, 0, 0, 0 ]
  clientColors: [ [ 0, 0, 255 ], [ 255, 0, 0 ], [ 255, 255, 0 ], [ 0, 255, 0 ], [ 0, 255, 255 ], [ 255, 0, 255 ], [ 255, 153, 0 ], [ 153, 153, 153 ], [ 230, 230, 250 ], [ 0, 0, 0 ] ]
  minDrawDistance:
    set: |
      this.minDrawDistance = value;
      this.minDistanceSquared = value * value;  
    value: 80000   
  markupAdded: 
methods:
  createClient:
  locationCaptured:
  findClient:
  newClientVideo:
  dropPin:
  draw:
children:
  toolbar:
    extends: http://vwf.example.com/node.vwf
    properties:
      selectedColor:
        set: |
          this.selectedColor = value;
          this.selectedColorChanged( value );
        get: |
          return this.selectedColor;
        value: "black"
      inputMode:
        set: |
          this.inputMode = value;
          this.inputModeChanged( value );
        value: "orbit"
    methods:
      clear: |
        if ( this.parent.markupAdded ) {
          var childToDelete = undefined;
          for ( var i = 0; i < this.parent.markupAdded.length; i++ ) {
            for ( var j = 0; j < this.parent.children.length; j++ ) {
              if ( this.parent.children[j].id == this.parent.markupAdded[i] ) {
                this.parent.deleteNode( this.parent.children[j] ); 
                break;
              }
            }
          }
          this.parent.markupAdded = [];
          this.parent.camera.resetCamera();
        }
        this.clearing();
    events:
      selectedColorChanged:
      inputModeChanged:
      clearing:
  camera:
    extends: http://vwf.example.com/cesium/camera.vwf
    properties:
      position: [ 0, -14261948, 11360974 ]
  sun: 
    extends: http://vwf.example.com/cesium/sun.vwf 
    properties:
      visible: false
  atmosphere: 
    extends: http://vwf.example.com/cesium/atmosphere.vwf 
    properties:
      visible: false
  skybox: 
    extends: http://vwf.example.com/cesium/skybox.vwf 
    properties:
      visible: false
  clients:
    extends: http://vwf.example.com/node.vwf
  earth:
    extends: http://vwf.example.com/cesium/globe.vwf 
scripts:
- |
    this.initialize = function() {
      console.info( "=============== cesium-webrtc.initialize ===============" );
      this.lastDrawPoint = undefined;
      this.polyLineCollection = undefined;
      this.markupAdded = [];
      
      this.minDistanceSquared = this.minDrawDistance * this.minDrawDistance;
    }
    
    this.toolbar.selectedColorChanged = this.events.add( function( color ) {
    }, this );

    this.toolbar.inputModeChanged = this.events.add( function( mode ) {
      
      if ( mode === undefined ) return;

      this.enableLook = ( mode == "orbit" ); 
      this.enableRotate = ( mode == "orbit" ); 
      this.enableTilt = ( mode == "orbit" ); 
      this.enableTranslate = ( mode == "orbit" ); 
      this.enableZoom = ( mode == "orbit" ); 

      switch( mode ) {
        case "orbit":
          break;

        case "draw":
          break;

        case "pindrop":
          break;
      }
    }, this );

    this.createClient = function( moniker, loginName ) {
      console.info( "createClient( "+moniker+", "+loginName+" )" );
      var self = this;
      
      var clr, colorList = this.clientColors;
      clr = colorList.shift();
      this.clientColors = colorList;

      var clientDef = { 
        "extends": "http://vwf.example.com/cesium/client.vwf",
        "properties": {
          "displayName": loginName,
          "color": clr
        },
      }
      this.clients.children.create( "client"+moniker, clientDef, function( child ){
        child.createMarkers( moniker == self.moniker );
      } );
    }
    this.findClient = function( moniker ) {
      var client = undefined;
      var clientMoniker = "";
      var len = this.clients.children.length;
      for ( var i = 0; i < len && client === undefined; i++ ) {
        clientMoniker = this.clients.children[i].name;
        clientMoniker = clientMoniker.substr( 6, clientMoniker.length-1 );
        if ( moniker == clientMoniker ) {
          client = this.clients.children[i];
        }
      }
      return client;
    } 
    this.locationCaptured = function( parms ) {
      var client = this.findClient( parms.moniker );
      if ( client !== undefined ) {
        client.location = parms.location;
        client.longitude = parms.longitude;
        client.latitude = parms.latitude;
      } else {
        this.future( 2.0 ).locationCaptured( parms );
      }
    }
    this.pointerClick = function( pointerInfo, pickInfo ) {

      switch ( pointerInfo.button ) {
        case "left":
          switch ( this.toolbar.inputMode ) {
            case "pindrop":
              if ( pickInfo.globalPosition ) {
                this.dropPin( pickInfo.globalPosition )
              }
              break;
          }
          break;
      }

    } 
    this.pointerDown = function( pointerInfo, pickInfo ) {
      
      switch ( pointerInfo.button ) {
          case "left":
            switch ( this.toolbar.inputMode ) {
              
              case "draw":
                if ( pickInfo && pickInfo.globalPosition ) {
                  this.lastDrawPoint = { pickInfo: pickInfo };
                } else {
                  this.lastDrawPoint = undefined;
                }
                break;
            }          
            break;
      }

    }
    this.pointerMove = function( pointerInfo, pickInfo ) {
      
      switch ( pointerInfo.button ) {
        
        case "left":
          switch ( this.toolbar.inputMode ) {
            case "draw":
              if ( pickInfo.globalPosition ) {
                var dist = this.distanceFromLast( pickInfo );
                if ( dist > this.minDistanceSquared ) {
                  this.draw( pickInfo )
                }
              }
              break;
          }
          break;
      }

    }    
    this.pointerUp = function( pointerInfo, pickInfo ) {
      
      switch ( this.toolbar.inputMode ) {
        case "draw":
          if ( pickInfo.globalPosition ) {
            this.draw( pickInfo )
          }
          break;
      }
      this.lastDrawPoint = undefined;
      this.polyLineCollection = undefined;

    }
    this.draw = function( pickInfo ) {

      if ( pickInfo && pickInfo.globalPosition ) {
        var self = this;
        var len;
        if ( this.lastDrawPoint ) {
          var start = this.lastDrawPoint.pickInfo.globalPosition;
          var end = pickInfo.globalPosition;

          var line = {
            "extends": "http://vwf.example.com/cesium/polyline.vwf",  
            "children": {
              "material": {
                "extends": "http://vwf.example.com/cesium/material.vwf",
                "type": { "context": false, "type": 'PolylineGlow' },
                "properties": {
                  "uniforms": { "innerWidth": 4.0, "color": this.toolbar.selectedColor }
                },
              },
            },
            "properties": {
              "positions": [ [ start[0], start[1], start[2] ], [ end[0], end[1], end[2] ] ],    
              "width": 8
            },
          };

          if ( this.polyLineCollection === undefined ) {
             var collection =  { 
              "extends": "http://vwf.example.com/cesium/polylineCollection.vwf", 
            };
            len = this.children.length;
            this.children.create( "lineCollection" + len, collection, function( child ) {
              self.polyLineCollection = child;
              child.children.create( "line0", line );
              this.markupAdded.push( child.id );
            } );

          } else {
            len = this.polyLineCollection.children.length;
            this.polyLineCollection.children.create( "line" + len, line, function( child ) {
              this.parent.markupAdded.push( child.id );
            } );
          }
          this.lastDrawPoint = { pickInfo: pickInfo };
        }
      }

    }
    this.dropPin = function( pos ) {

      var self = this;
      var bbDef = {
        "extends": "http://vwf.example.com/cesium/billboard.vwf",
      };
      var len = this.children.length;
      this.children.create( "pushPin" + len, bbDef, function( child ) {
        child.position = pos;
        child.color = self.toolbar.selectedColor;
        this.markupAdded.push( child.id );
      } );

    }
    this.distanceFromLast = function( pickInfo ) {

      var distSquared = 0;
      if ( pickInfo && pickInfo.globalPosition ) {
        if ( this.lastDrawPoint ) {
          var p1 = pickInfo.globalPosition;
          var p2 = this.lastDrawPoint.pickInfo.globalPosition;
          distSquared = Math.pow( p1[0] - p2[0], 2 ) + Math.pow( p1[1] - p2[1], 2 );
        }
      }
      return distSquared;

    } 
    this.deleteNode = function( node ) {
      var len = node.children.length;
      for ( var i = len-1; i >=0; i-- ) {
        this.deleteNode( node.children[i] );
      }
      if ( node.parent ) {
        node.parent.children.delete( node );
      }
    } //@ sourceURL=index.vwf