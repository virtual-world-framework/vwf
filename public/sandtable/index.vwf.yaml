# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

--- 
extends: http://vwf.example.com/scene.vwf
properties:
  ambientColor: [ 183, 183, 183 ]
  backgroundColor: [ 135, 196, 250 ]
  lineWidth: 32
  lineColor: [ 0, 0, 0 ]
  lineHeight: 100
  minDrawDistance: 200    
  inputMode: 
    set: |
      switch( value ) {
        case "draw":
        case "pindrop":        
          break;
        default:
          this.logger.warnx( "inputMode.set: 'draw' and 'pindrop' are the only supported input modes" );
          break;
      } //@ sourceURL=inputMode.set
    value: draw
  nodesCreated: []
  lineIndex: 1
  pushpinIndex: 1
  selectedColor: black
methods:
  initializeCamera:
  draw:
  pindrop:
  clear:
children:
  terrain:
    extends: http://vwf.example.com/node3.vwf
    source: models/vwf_terrain.dae
    type: model/vnd.collada+xml
    properties:
      translation: [ 0, 0, -150 ]
      scale: [ 0.008, 0.008, 0.020 ]
  light1:
    extends: http://vwf.example.com/light.vwf
    properties:
      lightType: "point"
      enable: true
      distance: 25000
      intensity: 1
      color: [ 128, 128, 128 ]
      translation: [ 10000, 0, 10000 ]
  light2:
    extends: http://vwf.example.com/light.vwf
    properties:
      lightType: "point"
      enable: true
      distance: 25000
      intensity: 1
      color: [ 128, 128, 128 ]
      translation: [ -10000, 0, 10000 ]
  predator1:
    extends: http://vwf.example.com/node3.vwf 
    implements:
    - http://vwf.example.com/followPath.vwf
    properties:
      translation: [ 0, 0, 1200 ]
    children:
      planeGroup1:
        extends: http://vwf.example.com/node3.vwf 
        properties:
          translation: [ 0, 0, 1200 ]
        children:
          plane1:
            extends: http://vwf.example.com/node3.vwf
            source: models/Predator.dae
            type: model/vnd.collada+xml
            properties:
              translation: [ 0, 500, 1800 ]
              scale: [ 15, 15, 15 ]
          cone1:
            extends: http://vwf.example.com/node3.vwf
            source: models/cone.dae
            type: model/vnd.collada+xml
            properties:
              translation: [ 0, -300, -1100 ]
              scale: [ 8, 8, 16 ]
    scripts:
    - |
      this.initialize = function() {
        this["followPath-path"] = [];
        var len = 0, pos, x, y, z = 1200;

        for ( var theta = 0; theta < 2 * Math.PI && len < (( 2*180 )-1); theta += Math.PI / 180 ) {
          x = 10000 * Math.cos( theta );
          y = 10000 * Math.sin( theta );
          len = this["followPath-path"].length;
          pos = [ x, y, z ];
          this["followPath-path"].push( { translation: pos, time: 1 } );
        }
        this["followPath-nextPathIndex"] = ( this["followPath-lastPathIndex"] || 0 ) + 1;
        this["followPath-lastTime"] = this.time;
        this.translation = this["followPath-path"][ this["followPath-lastPathIndex"] || 0 ].translation;

        this["followPath-following"] = true;          
      } //@ sourceURL=predator1.vwf
  predator2:
    extends: http://vwf.example.com/node3.vwf 
    implements:
    - http://vwf.example.com/followPath.vwf
    properties:
      translation: [ 0, 0, 1500 ]
      followPath-height: 1500
    children:
      planeGroup2:
        extends: http://vwf.example.com/node3.vwf 
        properties:
          translation: [ 0, 0, 1500 ]
        children:
          plane2:
            extends: http://vwf.example.com/node3.vwf
            source: models/Predator.dae
            type: model/vnd.collada+xml
            properties:
              translation: [ 0, 500, 1800 ]
              scale: [ 15, 15, 15 ]
          cone2:
            extends: http://vwf.example.com/node3.vwf
            source: models/cone.dae
            type: model/vnd.collada+xml
            properties:
              translation: [ 0, -300, -1100 ]
              scale: [ 8, 8, 16 ]
    scripts:
    - |
      this.initialize = function() {
        this["followPath-path"] = [];
        var len, pos, x = 0, y = 0, z = 12000;
        var radius = 5000;
        var step = 200;

        y = 0;
        for ( var x = radius - 200; x > -radius; x -= step ) {
          pos = [ x, 0, 1200 ];
          len = this["followPath-path"].length;
          this["followPath-path"].push( { translation: pos, time: 1 } );
        }

        for ( var theta = 1.5 * Math.PI; theta > 0; theta -= Math.PI / 90 ) {
          x = -radius + ( radius * Math.cos( theta ) );
          y = radius + ( radius * Math.sin( theta ) );
          len = this["followPath-path"].length;
          pos = [ x, y, z ];
          this["followPath-path"].push( { translation: pos, time: 2 } );
        } 

        x = 0;
        for ( var y = radius - step; y > -radius ; y -= step ) {
          pos = [ 0, y, 1200 ];
          len = this["followPath-path"].length;
          this["followPath-path"].push( { translation: pos, time: 1 } );
        }

        for ( var theta = 2 * Math.PI; theta > 0.5 * Math.PI; theta -= Math.PI / 90 ) {
          x = -radius + (radius * Math.cos( theta ) );
          y = -radius + (radius * Math.sin( theta ) );
          len = this["followPath-path"].length;
          pos = [ x, y, z ];
          this["followPath-path"].push( { translation: pos, time: 2 } );
        } 

        y = 0;
        for ( var x = -radius + step; x < radius; x += step ) {
          pos = [ x, 0, 1200 ];
          len = this["followPath-path"].length;
          this["followPath-path"].push( { translation: pos, time: 1 } );
        }            

        for ( var theta = 1.5 * Math.PI; theta < 3.0 * Math.PI; theta += Math.PI / 90 ) {
          x = radius + (radius * Math.cos( theta ) );
          y = radius + (radius * Math.sin( theta ) );
          len = this["followPath-path"].length;
          pos = [ x, y, z ];
          this["followPath-path"].push( { translation: pos, time: 2 } );
        }
        
        x = 0;
        for ( var y = radius - step; y > -radius; y -= step ) {
          pos = [ 0, y, 1200 ];
          len = this["followPath-path"].length;
          this["followPath-path"].push( { translation: pos, time: 1 } );
        }

        for ( var theta = 1.0 * Math.PI; theta < 2.5 * Math.PI; theta += Math.PI / 90 ) {
          x = radius + ( radius * Math.cos( theta ) );
          y = -radius + ( radius * Math.sin( theta ) );
          len = this["followPath-path"].length;
          pos = [ x, y, z ];
          this["followPath-path"].push( { translation: pos, time: 2 } );
        }            
       
        this["followPath-nextPathIndex"] = ( this["followPath-lastPathIndex"] || 0 ) + 1;
        this["followPath-lastTime"] = this.time;
        this.translation = this["followPath-path"][ this["followPath-lastPathIndex"] || 0 ].translation;
        
        this["followPath-following"] = true;
      } //@ sourceURL=predator2.vwf
scripts:
- |
  // Create object definitions for line and pushpin to be used to dynamically create these objects as the user
  // draws lines and places pushpins

  var line = {
    "extends": "http://vwf.example.com/node3.vwf",
    "type": "definition/mesh",
    "properties": { 
      "meshDefinition": { positions: [], faces: [], color: [] }
    }
  };

  var pushpin = {
    extends: "http://vwf.example.com/node3.vwf",
    source: "models/pushpinblack.dae",
    type: "model/vnd.collada+xml",
    properties: { 
      positions: [],
      scale: [ 6, 6, 6.6 ], 
    },    
  };

  // Function definitions

  this.initialize = function() {

    // TODO: When we can assume that initialize doesn't complete until all created nodes are in place, this
    //       will no longer need to be a future call because we will be able to assume that the camera exists
    this.future( 0 ).initializeCamera();
  }

  this.initializeCamera = function() {
    this.camera.transform = [ -1,     0,         0,     0,
                               0,    -0.894,    -0.447, 0,
                               0,    -0.447,     0.894, 0,
                               0, 20000,     10000,     1 ];
    this.camera.far = 500000;
    this.camera.near = 2;
    this.camera.translationSpeed = 10000;
  }

  this.draw = function( lastDrawPoint, pickInfo ) {
    if ( pickInfo && pickInfo.globalPosition ) {
      if ( lastDrawPoint ) {
        var start = lastDrawPoint.pickInfo.globalPosition;
        var end = pickInfo.globalPosition;
        var sp = goog.vec.Vec3.createFromArray( [ start[0], start[1], start[2] + this.lineHeight ] );
        var ep = goog.vec.Vec3.createFromArray( [ end[0], end[1], end[2] + this.lineHeight ] );
         
        var pos = [];
        var faces;
        
        var diff = goog.vec.Vec3.createFromArray( [ ep[0] - sp[0], ep[1] - sp[1], ep[2] - sp[2] ] );
        var up = goog.vec.Vec3.createFromArray( [ 0, 1, 0 ] );
        var right = goog.vec.Vec3.createFromArray( [ 1, 0, 0 ] );
        var top = goog.vec.Vec3.createFromArray( [ 0, 0, 0 ] );
        
        goog.vec.Vec3.normalize( diff, diff );

        if ( Math.abs( goog.vec.Vec3.dot( up, diff, goog.vec.Vec3.create() ) ) < .999 ) // diff far enough from up? (.999==2.5 degrees)
        { // then we can cross with up
          goog.vec.Vec3.cross( diff, up, right );
        }
        else
        { //too colinear with up, so start w/ a different axis
          goog.vec.Vec3.cross( diff, right, right );
        }
        top = goog.vec.Vec3.cross( diff, right, top );
        goog.vec.Vec3.normalize( right, right );
        goog.vec.Vec3.normalize( top, top );
        goog.vec.Vec3.scale( right, this.lineWidth, right );
        goog.vec.Vec3.scale( top, this.lineWidth, top );              
        
        pos.push( sp[0] + right[0] );  // 0
        pos.push( sp[1] + right[1] );  // 0
        pos.push( sp[2] + right[2] );  // 0
        
        pos.push( ep[0] + right[0] );  // 1
        pos.push( ep[1] + right[1] );  // 1
        pos.push( ep[2] + right[2] );  // 1
        
        pos.push( sp[0] - right[0] );  // 2
        pos.push( sp[1] - right[1] );  // 2
        pos.push( sp[2] - right[2] );  // 2
        
        pos.push( ep[0] - right[0] );  // 3
        pos.push( ep[1] - right[1] );  // 3
        pos.push( ep[2] - right[2] );  // 3
        
        pos.push( sp[0] + top[0] );  // 4
        pos.push( sp[1] + top[1] );  // 4
        pos.push( sp[2] + top[2] );  // 4
        
        pos.push( ep[0] + top[0] );  // 5
        pos.push( ep[1] + top[1] );  // 5
        pos.push( ep[2] + top[2] );  // 5
        
        pos.push( sp[0] - top[0] );  // 6
        pos.push( sp[1] - top[1] );  // 6
        pos.push( sp[2] - top[2] );  // 6
        
        pos.push( ep[0] - top[0] );  // 7
        pos.push( ep[1] - top[1] );  // 7
        pos.push( ep[2] - top[2] );  // 7
        
        faces = [ 0, 1, 3, 0, 3, 2, 4, 5, 7, 4, 7, 6 ];
        
        var newLine = $.extend(true, {}, line);
        newLine.properties.meshDefinition.positions = pos;
        newLine.properties.meshDefinition.faces = faces;
        
        newLine.properties.meshDefinition.color = this.lineColor.internal_val;
        
        this.children.create( "line"+this.lineIndex, newLine, function( newObj ) {
          this.nodesCreated.push( newObj.id );
          this.nodesCreated = this.nodesCreated;
        } );

        this.lineIndex++;
      }
      
    }
  }

  this.pindrop = function( pickInfo ) {
    
    if ( pickInfo && pickInfo.globalPosition ) {
      pushpin.properties.translation = pickInfo.globalPosition;
      
      if ( this.lineColor[0] == 255 && this.lineColor[1] == 0 && this.lineColor[2] == 0 ) 
        pushpin.source = "models/pushPinRed.dae";
      else if ( this.lineColor[0] == 0 && this.lineColor[1] == 255 && this.lineColor[2] == 0 ) 
        pushpin.source = "models/pushPinGreen.dae";
      else if ( this.lineColor[0] == 0 && this.lineColor[1] == 0 && this.lineColor[2] == 255 ) 
        pushpin.source = "models/pushPinBlue.dae";
      else if ( this.lineColor[0] == 0 && this.lineColor[1] == 0 && this.lineColor[2] == 0 ) 
        pushpin.source = "models/pushPinBlack.dae";
      else 
        pushpin.source = "models/pushPinYellow.dae";
      
      var name = "pushpin"+this.pushpinIndex;
      this.children.create( name, pushpin, function( newObj ) {
        this.nodesCreated.push( newObj.id );
        this.nodesCreated = this.nodesCreated;
      } );

      this.pushpinIndex++;        
      
    }
  } 

  this.clear = function() {
    if ( this.nodesCreated ) {
      for ( var i = 0; i < this.nodesCreated.length; i++ ){
        this.children.delete( this.getChild(this.nodesCreated[i]) );
      }
      this.nodesCreated = [];  
    }
  } //@ sourceURL=index.vwf