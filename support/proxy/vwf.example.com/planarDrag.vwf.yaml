# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

## The component representation of a control behavior
## 
## @name control.vwf
## @namespace

---
properties:
  normal:
  constant:
  mode: 
    set: |
      if ( value == "local" || value == "world" ) {
        this.mode = value;
      }
    value: "local"
methods:
  mouseInit: 
events:
  pointerDown:
  pointerMove:
  pointerUp:
scripts:
- |
  this.initialize = function() {
    this.pointerDownNormal = undefined;
    this.pointerDownConstant = undefined;
  }
  // Sets up the mouse pointer information used for dragging.
  this.mouseInit = function() {
    this.input = {
      "pointerInfo": undefined,
      "pickInfo": undefined,
      "previous": {
        "pointerInfo": undefined,
        "pickInfo": undefined,        
      },
      update: function( pointerInfo, pickInfo ){
        if(!this.previous.pointerInfo) {
          this.previous.pointerInfo = this.pointerInfo;
          this.previous.pickInfo = this.pickInfo;
        }
        this.pointerInfo = pointerInfo;
        this.pickInfo = pickInfo;
      }, 
      clear: function(){
        this.previous.pointerInfo = undefined;
        this.previous.pickInfo = undefined;
        this.pointerInfo = undefined;
        this.pickInfo = undefined;        
      },
      change: function() {
        var ret = [ 0, 0 ]
        if ( this.pointerInfo && this.previous.pointerInfo ) {
          ret[0] = this.pointerInfo.position[0] - this.previous.pointerInfo.position[0];
          ret[1] = this.pointerInfo.position[1] - this.previous.pointerInfo.position[1];
        }
        return ret;
      }
    };
  }
  
  this.pointerDown = function( pointerInfo, pickInfo ) {
    if ( this.input === undefined ) this.mouseInit();
    this.input.clear();
    this.input.pointerInfo = pointerInfo;
    this.input.pickInfo = pickInfo;
  }

  this.pointerUp = function( pointerInfo, pickInfo ) {
    this.input.clear();
  }

  this.pointerMove = function( pointerInfo, pickInfo ) {
    if ( this.mode == "world" ) {

    } else if ( this.mode == "local" ) {

    }

    this.input.previous.pointerInfo = pointerInfo;
    this.input.previous.pickInfo = pickInfo;
  } //@ sourceURL=planarDrag.vwf
