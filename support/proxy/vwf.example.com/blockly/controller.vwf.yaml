# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

## The component representation of a scale behavior (on move)
## 
## @name blockly/controller.vwf
## @namespace

--- 
extends:
  http://vwf.example.com/node3/animation.vwf
properties:
  forwardSpeed: 400
  rotateSpeed: 30
  animationTime: 1
  executing: false
  blockXml: "<xml></xml>"
  blockCode:
  topBlockCount:
    set: |
      if ( this.topBlockCount != value ) {
        this.topBlockCount = value;
        this.topBlockCountChanged( value );
      }
    value: 0
  blockCount:
    set: |
      if ( this.blockCount != value ) {
        this.blockCount = value;
        this.blockCountChanged( value );
      }
    value: 0
  allowedBlocks: 20   
methods:
  getWorldXYVector:
  executeBlocklyCmd:
events:
  blockCountChanged:
  topBlockCountChanged:
  blocklyVisibleChanged:
scripts:
- |
    this.getWorldXYVector = function( x, y ) {

      var dir = goog.vec.Vec3.create();
      var moveVectorInCameraFrame = goog.vec.Vec4.createFromValues( x, y, 0, 1 );
      var camWorldRotMat = goog.vec.Mat4.createFromArray( this.worldTransform );
      camWorldRotMat[ 12 ] = 0;
      camWorldRotMat[ 13 ] = 0;
      camWorldRotMat[ 14 ] = 0;

      dir = goog.vec.Mat4.multVec4( camWorldRotMat, moveVectorInCameraFrame, dir );
      dir[ 2 ] = 0;

      goog.vec.Vec3.normalize( dir, dir ); 
      return dir;

    }

    this.executeBlocklyCmd = function( cmd, value, time ) {

      var dir = undefined;
      var speed, angle, t;

      switch( cmd ) {

        case "translateBy":
          //dir = this.getWorldXYVector( 0, -1 );
          //speed = ( magnitude && Number( magnitude ) ) ? Number( magnitude ) : this.forwardSpeed;
          t = ( time && time !== "0" ) ? parseFloat( time ) : this.animationTime;
          //this.translateBy( [ dir[ 0 ] * speed, dir[ 1 ] * speed, 0 ], t );
          this.translateBy( value, t );
          break;

        case "translateTo":
          t = ( time && time !== "0" ) ? parseFloat( time ) : this.animationTime;
          this.translateBy( value, t );
          break;

        case "rotateBy":
          //angle = ( magnitude && Number( magnitude ) ) ? Number( magnitude ) : this.rotateSpeed;
          t = ( time && time !== "0" ) ? parseFloat( time ) : this.animationTime;
          this.rotateBy( value, t );
          break;

        case "rotateTo":
          t = ( time && time !== "0" ) ? parseFloat( time ) : this.animationTime;
          this.rotateTo( value, t );
          break;

        case "quaterniateBy":
          //angle = ( magnitude && Number( magnitude ) ) ? Number( magnitude ) : this.rotateSpeed;
          t = ( time && time !== "0" ) ? parseFloat( time ) : this.animationTime;
          this.quaterniateBy( value, t );
          break;

        case "quaterniateTo":
          t = ( time && time !== "0" ) ? parseFloat( time ) : this.animationTime;
          this.quaterniateTo( value, t );
          break;

        case "scaleBy":
          //angle = ( magnitude && Number( magnitude ) ) ? Number( magnitude ) : this.rotateSpeed;
          t = ( time && time !== "0" ) ? parseFloat( time ) : this.animationTime;
          this.scaleBy( value, t );
          break;

        case "scaleTo":
          t = ( time && time !== "0" ) ? parseFloat( time ) : this.animationTime;
          this.scaleTo( value, t );
          break;

        default:
          break;
      }

    }  //@ sourceURL=blockly-controller.vwf
    
