---
extends: http://vwf.example.com/shaderMaterial.vwf
properties:
  mixMapSrc:
    set: |
      this.uniforms.mixTex.value = this.newTexture( value );
      this.mixMapSrc = value;
      this.updateUniforms();
  defTexSrc:
    set: |
      this.uniforms.defTex.value = this.newTexture( value );
      this.defTexSrc = value;
      this.updateUniforms();
  redTexSrc:
    set: |
      this.uniforms.redTex.value = this.newTexture( value );
      this.redTexSrc = value;
      this.updateUniforms();
  grnTexSrc:
    set: |
      this.uniforms.grnTex.value = this.newTexture( value );
      this.grnTexSrc = value;
      this.updateUniforms();
  bluTexSrc:
    set: |
      this.uniforms.bluTex.value = this.newTexture( value );
      this.bluTexSrc = value;
      this.updateUniforms();
  textureResolution:
    set: |
      this.uniforms.texRes.value = value;
      this.textureResolution = value;
      this.updateUniforms();
  uniforms:
    mixTex:
      type: "t"
      value: 0
    defTex:
      type: "t"
      value: 0
    redTex:
      type: "t"
      value: 0
    grnTex:
      type: "t"
      value: 0
    bluTex:
      type: "t"
      value: 0
    texRes:
      type: "f"
      value: 0
  vertexShader: |
    varying vec2 vUv;
    void main() {
      vUv = uv;
      vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
      gl_Position = projectionMatrix * mvPosition;
    }
  fragmentShader: |
    uniform sampler2D defTex;
    uniform sampler2D redTex;
    uniform sampler2D grnTex;
    uniform sampler2D bluTex;
    uniform sampler2D mixTex;
    uniform float texRes;
    varying vec2 vUv;
    void main() {
        vec3 mixMapPixel = texture2D( mixTex, vUv ).xyz;
        vec2 texUv = vUv * texRes;
        float rgbWeight = max( max( mixMapPixel.x, mixMapPixel.y), mixMapPixel.z );
        float dWeight = 1.0 - rgbWeight;
        float rgbLength = length( mixMapPixel );
        float rWeight = mixMapPixel.x / rgbLength * rgbWeight;
        float gWeight = mixMapPixel.y / rgbLength * rgbWeight;
        float bWeight = mixMapPixel.z / rgbLength * rgbWeight;
        vec3 defTexel = texture2D( defTex, texUv ).xyz;
        vec3 redTexel = texture2D( redTex, texUv ).xyz;
        vec3 grnTexel = texture2D( grnTex, texUv ).xyz;
        vec3 bluTexel = texture2D( bluTex, texUv ).xyz;
        vec3 finalColor = dWeight * defTexel + 
                          rWeight * redTexel + 
                          gWeight * grnTexel + 
                          bWeight * bluTexel;
        gl_FragColor = vec4( finalColor, 1.0 );
    }
methods:
  updateUniforms: |
    this.uniforms = this.uniforms;
  newTexture:
    parameters:
      - value
    body: |
      var tex = THREE.ImageUtils.loadTexture( value );
      tex.wrapS = tex.wrapT = THREE.RepeatWrapping;
      return tex;
