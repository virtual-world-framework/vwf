# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

require "rake"
require "rake/clean"
require "tilt"
require "tmpdir"
require "pathname"


SOURCE = "lib"
DESTINATION = "libz"
DOCUMENTATION = "../../public/web/docs/jsdoc"

PATTERNS = [ "vwf.js", "vwf/*.js", "vwf/*/*.js", "vwf/*/stage/*.js", "logger.js", "version.js" ]

chdir SOURCE do
    MODULES = FileList.new( PATTERNS ).sort.map do |file|
        file.sub %r{\.js$}, ""
    end
end

CLEAN.include "build.js", "#{DESTINATION}/**/*.js.z", "#{DESTINATION}/build.txt"
CLOBBER.include "#{DESTINATION}", "#{DOCUMENTATION}"


desc "Run the RequireJS optimizer."

task :build => [ :clean, :compile, :compress, :documentation ]

desc "Generate the compilation script."

file "build.js" => "build.js.erb" do |task|

    File.open( task.name, "w" ) do |io|
        io.write Tilt.new( task.prerequisites.first ).
            render Object.new, :source => SOURCE, :destination => DESTINATION, :modules => MODULES
    end

end


desc "Null Tasks"
task :full
task :web

desc "Compile."

task :compile => "build.js" do |task|

    separator = RbConfig::CONFIG["host_os"] =~ /mswin|mingw|cygwin/ ? "\\;" : ":"

    sh <<-SH.strip.gsub %r{ +}, " "
        java -classpath bin/js.jar#{separator}bin/compiler.jar \
            org.mozilla.javascript.tools.shell.Main bin/r.js -o build.js
    SH

end

desc "Compress."

task :compress => "build.js" do |task|
    
    MODULES.each do |path|
        
        sh <<-SH.strip.gsub %r{ +}, " "
            java -jar bin/compiler.jar --compilation_level SIMPLE_OPTIMIZATIONS --language_in ECMASCRIPT5_STRICT \
                --js '#{DESTINATION}/#{path}.js' --js_output_file '#{DESTINATION}/#{path}.js.z'
        SH

        mv "#{DESTINATION}/#{path}.js.z", "#{DESTINATION}/#{path}.js"

    end

end

desc "Generate the jsdoc documentation."

task :documentation do |task|

    Dir.mktmpdir nil, "." do |tmpdir| # not in /tmp since java can't see across /cygdrive/c/... on Cygwin

        # Calculate absolute paths for the output directory and the build tools.

        documentation = File.expand_path DOCUMENTATION
        build = File.expand_path "../build"

        # Copy the input directory to a temporary location.

        cp_r SOURCE + "/.", tmpdir

        # cd to the copy and build from there.

        chdir tmpdir do

            # Convert to relative paths so that java doesn't need to traverse /cygdrive/c/... on Cygwin.

            cwd = Pathname.new( "." ).expand_path

            documentation = Pathname.new( documentation ).expand_path.relative_path_from( cwd ).to_s
            build = Pathname.new( build ).expand_path.relative_path_from( cwd ).to_s

            # Convert /// comments to /** */ comments for jsdoc.

            sh "ruby", "-p", "-i.bak", "#{build}/js-to-jsdoc.rb", * FileList.new( PATTERNS ).sort

            # Run jsdoc on the translated source.

            if RUBY_VERSION >= "1.9" && RbConfig::CONFIG["host_os"] =~ /cygwin/
                env = { "SHELLOPTS" => "igncr" }  # allow bash scripts with CRLF terminators on Cygwin
                sh env, "#{build}/jsdoc/jsdoc", "--configure", "#{build}/jsdoc.conf", "--destination", "#{documentation}",
                    * FileList.new( PATTERNS ).sort
            else
                sh "#{build}/jsdoc/jsdoc", "--configure", "#{build}/jsdoc.conf", "--destination", "#{documentation}",
                    * FileList.new( PATTERNS ).sort
            end

        end

    end
end

desc "Run JavaScript client tests" # TODO: Doesn't show up yet
task :test do
  phantomjs = phantomjs_binary(ENV['PHANTOMJS_BIN'])
  next unless phantomjs

  dashed_line = "----------------"

  puts dashed_line
  puts "Running All QUnit Tests for VWF"
  puts dashed_line

  pass_count, fail_count, total, total_time = [0, 0, 0, 0]
  FileList["test/**/*.html"].each do |file|
    puts "Running #{file}"

    pwd = `pwd`.strip
    output = `#{phantomjs} test/run-qunit.js #{file}`

    result_lines = output.split("\n")

    result = result_lines[-2]
    failed = false
    unless result.nil? || result.empty?
      pass_count += result.split(" ")[0].to_i
      total += result.split(" ")[3].to_i
      this_fail_count = result.split(" ")[5].to_i
      fail_count += this_fail_count
      failed = true if this_fail_count > 0
    end

    if failed
      result_output_start = result_lines.index("-------------")
      result_lines[result_output_start+3..-5].each { |l| puts l }
    end

    time_result = result_lines[-3]
    unless time_result.empty?
      total_time += time_result.split(" ")[3].to_i
    end
  end

  puts dashed_line
  puts "Took #{total_time/1000.0}s to run #{total} assertions, #{pass_count} passed, #{fail_count} failed."
  puts dashed_line
end

def phantomjs_binary(phantomjs_binary_env)
  return phantomjs_on_path if (phantomjs_binary_env.nil? || phantomjs_binary_env.empty?)

  # File expects the string to be escaped, and there's no consistent way to escape across Windows and Unix-based
  phantomjs_binary_env_escaped = phantomjs_binary_env.gsub("\\ ", " ")
  if File.exists?(phantomjs_binary_env_escaped) && File.executable?(phantomjs_binary_env_escaped)
    return phantomjs_binary_env
  else
    return phantomjs_on_path
  end
end

def phantomjs_on_path
  output = %x[which phantomjs]
  # 'which phantomjs' on Mac/Linux returns nothing, but on Cygwin returns "which: no phantomjs in (PATH)"
  if output.empty? || output =~ /no phantomjs in/
    puts "The QUnit tests require phantomjs. Please install before running."
    return false
  else
    return "phantomjs"
  end
end
