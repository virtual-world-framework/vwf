# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

--- 
extends: http://vwf.example.com/physics2.vwf
properties:
  nodesCreated: 
  createCube: true
  cubesCreated: 0
  spheresCreated: 0
  colorIndex:
    set: |
      if ( ( value >= 0 ) && ( value <= 6 ) ) {
        this.colorIndex = value;
      } else {
        this.colorIndex = 0;
      }
    value: 0
  tossCubeStrength:
    set: |
      if ( value >= 0 ) {
        this.tossCubeStrength = value;
      }   
    value: 150
  tossSphereStrength:
    set: |
      if ( value >= 0 ) {
        this.tossSphereStrength = value;
      }   
    value: 250
methods:
  clear:
scripts:
- |
    var lastTimeObjWasCreated;
    var mouseIsDown = false;
    var mouseDownTime = -1;
    var idsToAddVelocity;
    var materials = [ "red", "blue", "yellow", "green", "orange", "purple", "silver" ];
    var cube = { 
      "source": "Cube", 
      "extends": "http://vwf.example.com/physics3.vwf",
      "type": "text/xml",
      "properties": { 
        "material": "",
        "rotVelocityDamping": [ 0.5, 0.5, 0.5 ], 
        "physics": [ "box", 3.0, 3.0, 3.0 ], 
        "friction": 0.5, 
        "mass": 400, 
        "linVelocityDamping": [ 1, 1, 1, 0 ], 
        "restitution": 0.10, 
        "private": null,
        } 
      };
    var sphere = { 
      "source": "Sphere", 
      "extends": "http://vwf.example.com/physics3.vwf",
      "type": "text/xml",
      "properties": { 
        "material": "", 
        "rotVelocityDamping": [ 0.5, 0.5, 0.5 ], 
        "physics": [ "sphere", 2.0 ], 
        "friction": 0.5, 
        "mass": 100, 
        "linVelocityDamping": [ 0.99, 0.99, 0.99, 0 ], 
        "restitution": 0.10, 
        "private": null,
        } 
      };
    this.initialize = function() {
      this.nodesCreated = [];
    }  
    this.keyDown = function( keyInfo ) {
      var key = undefined;
      for ( var kd in keyInfo.keysDown ) {
        key = keyInfo.keysDown[kd];
        if ( key.char == " " || key.key == "space" ) {
          this.createObject();
        }
      }
    }
    this.clear = function(){
      if ( this.nodesCreated ) {
        var node;
        for ( var i = 0; i < this.nodesCreated.length; i++ ){
          node = this.getChild( this.nodesCreated[i] );
          if ( node ) {
            this.children.delete( node );
          }
        }
        this.nodesCreated = [];  
      }       
    }
    this.createObject = function() {
      var newObjName;

      if (!this.activeCameraComp) {
        this.getActiveCamera();
      }
      if ( this.activeCameraComp ) {
        var trans = this.activeCameraComp.transform;
           
        if ( trans ) {
          var at = goog.vec.Vec3.createFromValues( trans[4], trans[5], trans[6] );
          goog.vec.Vec3.normalize( at, at )

          if ( this.createCube ) {
            this.cubesCreated += 1;
            newObjName = "cube" + this.cubesCreated;
            
            cube.properties.material = materials[ this.colorIndex ];
            cube.properties.transform = [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, trans[12], trans[13], trans[14] - 10, 1 ];
            var vel = [ at[0] * this.tossCubeStrength, at[1] * this.tossCubeStrength, at[2] * this.tossCubeStrength];
            this.colorIndex += 1;
  
            cube.scripts = [];
            cube.scripts.push( "this.initialize = function() { this.velocity = [ "+vel[0]+", "+vel[1]+", "+vel[2]+" ]; }" );

            this.children.create( newObjName, cube );
            this.createCube = false;
          } else {
            this.spheresCreated += 1;
            newObjName = "sphere" + this.spheresCreated;
            
            sphere.properties.material = materials[ this.colorIndex ];
            sphere.properties.transform = [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, trans[12], trans[13], trans[14] - 10, 1 ];
            var vel = [ at[0] * this.tossSphereStrength, at[1] * this.tossSphereStrength, at[2] * this.tossSphereStrength ];
            this.colorIndex += 1;

            sphere.scripts = [];
            sphere.scripts.push( "this.initialize = function() { this.velocity = [ "+vel[0]+", "+vel[1]+", "+vel[2]+" ]; }" );
            
            this.children.create( newObjName, sphere );
            this.createCube = true;      
          }
          if ( newObjName && newObjName != "" ) {
            this.nodesCreated.push( "http-vwf-example-com-physics3-vwf-"+newObjName );
            this.nodesCreated = this.nodesCreated;
          }
        }
      }
    } //@ sourceURL=appscene.vwf
