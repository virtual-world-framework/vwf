# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

## The component representation of a material
## 
## @name material.vwf
## @namespace

--- 
extends: http://vwf.example.com/node.vwf
properties:
  
  ## Texture
  ## 
  ## @name material.vwf#texture
  ## @property

  texture:
    set: |
      this.texture = value;

  ## Color
  ## 
  ## @name material.vwf#color
  ## @property

  color: 
    set: |
      this.color = value;

  ## Specular color
  ## 
  ## @name material.vwf#specColor
  ## @property

  specColor:
    set: |
      this.specColor = value;

  ## Reflective value
  ## 
  ## @name material.vwf#reflect
  ## @property

  reflect:
    set: |
      this.reflect = value;

  ## Shininess value
  ## 
  ## @name material.vwf#shininess
  ## @property

  shininess:
    set: |
      this.shininess = value;

  ## Specular value
  ## 
  ## @name material.vwf#specular
  ## @property

  specular:
    set: |
      this.specular = value;

  ## Emit
  ## 
  ## @name material.vwf#emit
  ## @property

  emit:
    set: |
      this.emit = value;

  ## Alpha value
  ## 
  ## @name material.vwf#alpha
  ## @property

  alpha:
    set: |
      this.alpha = value;

  ## Ambient value
  ## 
  ## @name material.vwf#ambient
  ## @property

  ambient: 
    set: |
      this.ambient = value;

  ## Binary alpha
  ## 
  ## @name material.vwf#binaryAlpha
  ## @property

  binaryAlpha:
    set: |
      this.binaryAlpha = value;

  ## Bump scale
  ## 
  ## @name material.vwf#bumpScale
  ## @property

  bumpScale:
    set: |
      this.bumpScale = value;

  ## Transparent
  ## 
  ## @name material.vwf#transparent
  ## @property

  transparent:
    set: |
      this.transparent = value;

  ## opacity
  ## 
  ## @name material.vwf#opacity
  ## @property

  opacity:
    set: |
      this.opacity = value;

  ## alphaTest
  ## 
  ## @name material.vwf#alphaTest
  ## @property

  alphaTest:
    set: |
      this.alphaTest = value;

  ## side
  ## 
  ## @name material.vwf#side
  ## @property

  side:
    set: |
      if ( value === "front" || value === "back" || value === "double" ) {
        this.side = value;  
      }
    value: front

  ## textureWrapT
  ## 
  ## @name material.vwf#textureWrapT
  ## @property

  textureWrapT:
    set: |
      if ( value === "repeat" || value === "clamp" || value === "mirror" ) {
        this.textureWrapT = value;  
      }
    value: clamp

  ## textureWrapS
  ## 
  ## @name material.vwf#textureWrapS
  ## @property

  textureWrapS:
    set: |
      if ( value === "repeat" || value === "clamp" || value === "mirror" ) {
        this.textureWrapS = value;  
      }
    value: clamp

  ## textureRepeat
  ## 
  ## @name material.vwf#textureRepeat
  ## @property

  textureRepeat: [ 1, 1 ]

