# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

---
extends: http://vwf.example.com/node.vwf
properties:
  worldTransform:
    set: |
      var parentInverse = goog.vec.Mat4.invert( this.transformFromValue( parent.transform ), goog.vec.Vec3.create() );
      var transform = goog.vec.Mat4.multMat( parentInverse, this.transformFromValue( value ), goog.vec.Vec3.create() );
      this.transform = transform;
  transform:
    set: |
      var transform = this.transformFromValue( value ); // parse incoming value
      if ( ! goog.vec.Mat4.equals( this.transform || goog.vec.Mat4.createIdentity(), transform ) ) {
        this.transform = transform;
        this.transformChanged( transform );
      }
  translation:
    # node.translation <= [ x, y, z ]
    set: |
      var translation = this.translationFromValue( value ); // parse incoming value
      var transform = this.transform || goog.vec.Mat4.createIdentity();
      goog.vec.Mat4.setColumnValues( transform, 3, translation[0], translation[1], translation[2], 1 );
      this.transform = transform; //@ sourceURL=node3.translation.set.vwf
    # node.translation => [ x, y, z ]
    get: |
      var translation = goog.vec.Vec3.create();
      goog.vec.Mat4.getColumn( this.transform || goog.vec.Mat4.createIdentity(), 3, translation );
      return translation;
  rotation:
    # node.rotation <= [ x, y, z, angle ]
    set: |
      var rotation = this.rotationFromValue( value ); // parse incoming value
      this.quaternion =
        goog.vec.Quaternion.fromAngleAxis(
          rotation[3] * Math.PI / 180,
          goog.vec.Vec3.createFromValues( rotation[0], rotation[1], rotation[2] ),
          goog.vec.Quaternion.create()
        );
    # node.rotation => [ x, y, z, angle ]
    get: |
      var rotation = goog.vec.Vec4.create();
      rotation[3] = goog.vec.Quaternion.toAngleAxis(
        this.quaternion || goog.vec.Quaternion.createFromValues( 0, 0, 0, 1 ),
        rotation
      ) * 180 / Math.PI;
      return rotation;
  rotationMatrix:
    get: |
      return this.unscaledTransform(
        this.transform || goog.vec.Mat4.createIdentity(),
        goog.vec.Vec3.create(),
        goog.vec.Mat4.create()
      );
  quaternion:
    # node.quaternion <= [ x, y, z, w ]
    set: |
      var transform = this.transform || goog.vec.Mat4.createIdentity();
      var translation = goog.vec.Vec4.create(); goog.vec.Mat4.getColumn( transform, 3, translation );
      var scale = this.transformScale( transform, goog.vec.Vec3.create() );
      var quaternion = this.quaternionFromValue( value ); // parse incoming value
      goog.vec.Quaternion.toRotationMatrix4(
        quaternion,
        transform
      );
      this.scaledTransform( transform, scale, transform );
      goog.vec.Mat4.setColumn( transform, 3, translation );
      this.transform = transform;
    # node.quaternion => [ x, y, z, w ]
    get: |
      return goog.vec.Quaternion.fromRotationMatrix4(
        this.unscaledTransform(
          this.transform || goog.vec.Mat4.createIdentity(),
          goog.vec.Vec3.create(),
          goog.vec.Mat4.create()
        ),
        goog.vec.Quaternion.create()
      );
  scale:
    # node.scale <= [ x, y, z ], node.scale <= s
    set: |
      var scale = this.scaleFromValue( value ); // parse incoming value
      var transform = this.transform || goog.vec.Mat4.createIdentity();
      this.scaledTransform(
        this.unscaledTransform(
          transform,
          goog.vec.Vec3.create(),
          transform
        ),
        scale,
        transform
      );
      this.transform = transform;
    # node.scale => [ x, y, z ]
    get: |
      return this.transformScale(
        this.transform || goog.vec.Mat4.createIdentity(),
        goog.vec.Vec3.create()
      );
  enabled: true
  boundingbox: 
    set: |
      this.logger.info("WARNING: node3 boundingbox cannot be set" )
  centerOffset: 
    set: |
      this.logger.info( "WARNING: node3 centerOffset cannot be set" )
  vertices: 
    set: |
      this.logger.info( "WARNING: node3 vertices cannot be set" )
    value: 
  vertexIndices: 
    set: |
      this.logger.info( "WARNING: node3 vertexIndices cannot be set" )
    value: 
  speed: 1
  playing: false
  looping: false
  lookAt: ""
  visible: true
methods:
  # Translate by translation over duration.
  translateBy:
    parameters:
      - translation
      - duration
    body: |
      var startTranslation = this.translation || goog.vec.Vec3.create();
      var deltaTranslation = this.translationFromValue( translation );
      var stopTranslation = goog.vec.Vec3.add(
        startTranslation,
        deltaTranslation,
        goog.vec.Vec3.create()
      );
      this.translationWorker(
        startTranslation,
        stopTranslation,
        this.time,
        this.time + ( duration || 0 )
      ); //@ sourceURL=node3.translateBy.vwf
  # Translate to translation over duration.
  translateTo:
    parameters:
      - translation
      - duration
    body: |
      var startTranslation = this.translation || goog.vec.Vec3.create();
      var stopTranslation = this.translationFromValue( translation );
      this.translationWorker(
        startTranslation,
        stopTranslation,
        this.time,
        this.time + ( duration || 0 )
      ); //@ sourceURL=node3.translateTo.vwf
  # Perform a translation animation.
  translationWorker:
    parameters:
      - startTranslation
      - stopTranslation
      - startTime
      - stopTime
    body: |
      this.translation = goog.vec.Vec3.lerp(
        startTranslation, stopTranslation,
        startTime >= stopTime ? 1 : ( Math.max( startTime, Math.min( this.time, stopTime ) ) - startTime ) / ( stopTime - startTime ),
        goog.vec.Vec3.create()
      );
      if ( this.time < stopTime ) {
        this.in( 0.04 ).translationWorker(
          startTranslation,
          stopTranslation,
          startTime,
          stopTime
        ); // TODO: way to do this.in( next-tick )...
      }  //@ sourceURL=node3.translationWorker.vwf
  # Rotate by rotation over duration.
  rotateBy:
    parameters:
      - rotation
      - duration
    body: |
      var rotation = this.rotationFromValue( rotation );
      var deltaQuaternion = goog.vec.Quaternion.fromAngleAxis(
        rotation[3] * Math.PI / 180,
        goog.vec.Vec3.createFromValues( rotation[0], rotation[1], rotation[2] ),
        goog.vec.Quaternion.create()
      );
      this.quaterniateBy( deltaQuaternion, duration ); //@ sourceURL=node3.rotateBy.vwf
  # Rotate to rotation over duration.
  rotateTo:
    parameters:
      - rotation
      - duration
    body: |
      var rotation = this.rotationFromValue( rotation );
      var stopQuaternion = goog.vec.Quaternion.fromAngleAxis(
        rotation[3] * Math.PI / 180,
        goog.vec.Vec3.createFromValues( rotation[0], rotation[1], rotation[2] ),
        goog.vec.Quaternion.create()
      );
      this.quaterniateTo( stopQuaternion, duration ); //@ sourceURL=node3.rotateTo.vwf
  # Rotate by quaternion over duration.
  quaterniateBy:
    parameters:
      - quaternion
      - duration
    body: |
      var startQuaternion = this.quaternion || goog.vec.Quaternion.createFromValues( 0, 0, 0, 1 );
      var deltaQuaternion = this.quaternionFromValue( quaternion );
      var stopQuaternion = goog.vec.Quaternion.concat(
        deltaQuaternion,
        startQuaternion,
        goog.vec.Quaternion.create()
      );
      this.quaternionWorker(
        startQuaternion,
        stopQuaternion,
        this.time,
        this.time + ( duration || 0 )
      ); //@ sourceURL=node3.quaterniateBy.vwf
  # Rotate to quaternion over duration.
  quaterniateTo:
    parameters:
      - quaternion
      - duration
    body: |
      var startQuaternion = this.quaternion || goog.vec.Quaternion.createFromValues( 0, 0, 0, 1 );
      var stopQuaternion = this.quaternionFromValue( quaternion );
      this.quaternionWorker(
        startQuaternion,
        stopQuaternion,
        this.time,
        this.time + ( duration || 0 )
      ); //@ sourceURL=node3.quaterniateTo.vwf
  # Perform a quaternion animation.
  quaternionWorker:
    parameters:
      - startQuaternion
      - stopQuaternion
      - startTime
      - stopTime
    body: |
      this.quaternion = goog.vec.Quaternion.slerp(
        startQuaternion, stopQuaternion,
        startTime >= stopTime ? 1 : ( Math.max( startTime, Math.min( this.time, stopTime ) ) - startTime ) / ( stopTime - startTime ),
        goog.vec.Quaternion.create()
      );
      if ( this.time < stopTime ) {
        this.in( 0.04 ).quaternionWorker(
          startQuaternion,
          stopQuaternion,
          startTime,
          stopTime
        ); // TODO: way to do this.in( next-tick )...
      } //@ sourceURL=node3.quaternionWorker.vwf
  # Scale by scale over duration.
  scaleBy:
    parameters:
      - scale
      - duration
    body: |
      var startScale = this.scale || goog.vec.Vec3.createFromValues( 1, 1, 1 );
      var deltaScale = this.scaleFromValue( scale );
      var stopScale = goog.vec.Vec3.createFromValues(
        startScale[0] * deltaScale[0],
        startScale[1] * deltaScale[1],
        startScale[2] * deltaScale[2]
      );
      this.scaleWorker(
        startScale,
        stopScale,
        this.time,
        this.time + ( duration || 0 )
      );
  # Scale to scale over duration.
  scaleTo:
    parameters:
      - scale
      - duration
    body: |
      var startScale = this.scale || goog.vec.Vec3.createFromValues( 1, 1, 1 );
      var stopScale = this.scaleFromValue( scale );
      this.scaleWorker(
        startScale,
        stopScale,
        this.time,
        this.time + ( duration || 0 )
      );
  # Perform a scale animation.
  scaleWorker:
    parameters:
      - startScale
      - stopScale
      - startTime
      - stopTime
    body: |
      this.scale = goog.vec.Vec3.lerp(  // TODO: should be geometric interpolation
        startScale, stopScale,
        startTime >= stopTime ? 1 : ( Math.max( startTime, Math.min( this.time, stopTime ) ) - startTime ) / ( stopTime - startTime ),
        goog.vec.Vec3.create()
      );
      if ( this.time < stopTime ) {
        this.in( 0.04 ).scaleWorker(
          startScale,
          stopScale,
          startTime,
          stopTime
        );  // TODO: way to do this.in( next-tick )...
      }
events:
  keyDown:
  keyPress:
  keyUp:
  pointerClick:
  pointerDown:
  pointerMove:
  pointerUp:
  pointerEnter:
  pointerOver:
  pointerLeave:
  pointerWheel:
  transformChanged:
scripts:
- |
  // Parse a parameter as a transform specification.
  this.transformFromValue = function( value ) {
    return value && value.length >= 16 ?
      value :
      goog.vec.Mat4.createIdentity();
  };
  // Parse a parameter as a translation specification.
  this.translationFromValue = function( value ) {
    return value && value.length >= 3 ?
      value :
      goog.vec.Vec3.create();
  };
  // Parse a parameter as a rotation specification.
  this.rotationFromValue = function( value ) {
    return value && value.length >= 4 ?
      value :
      goog.vec.Vec4.createFromValues( 1, 0, 0, 0 );
  };
  // Parse a parameter as a quaternion specification.
  this.quaternionFromValue = function( value ) {
    return value && value.length >= 4 ?
      value :
      goog.vec.Quaternion.createFromValues( 0, 0, 0, 1 );
  };
  // Parse a parameter as a scale specification.
  this.scaleFromValue = function( value ) {
    return Object.prototype.toString.call( value ).search( /\[object .*Array\]/ ) == 0 ?
      value.length >= 3 ?
        value :
        goog.vec.Vec3.createFromValues( 1, 1, 1 ) :
      Object.prototype.toString.call( value ) == "[object Number]" ?
        goog.vec.Vec3.createFromValues( value, value, value ) :
        goog.vec.Vec3.createFromValues( 1, 1, 1 );
  };
  // Get the scale vector for a transform and rescale to unity scale.
  this.unscaledTransform = function( transform, scale, resultTransform ) {
    var column = goog.vec.Vec4.create();
    goog.vec.Mat4.getColumn( transform, 0, column );
    goog.vec.Mat4.setColumn( resultTransform, 0, goog.vec.Vec4.scale( column, 1 / ( scale[0] = goog.vec.Vec4.magnitude( column ) ), column ) );
    goog.vec.Mat4.getColumn( transform, 1, column );
    goog.vec.Mat4.setColumn( resultTransform, 1, goog.vec.Vec4.scale( column, 1 / ( scale[1] = goog.vec.Vec4.magnitude( column ) ), column ) );
    goog.vec.Mat4.getColumn( transform, 2, column );
    goog.vec.Mat4.setColumn( resultTransform, 2, goog.vec.Vec4.scale( column, 1 / ( scale[2] = goog.vec.Vec4.magnitude( column ) ), column ) );
    return resultTransform;
  };
  // Set the scale vector for a transform with unity scale.
  this.scaledTransform = function( transform, scale, resultTransform ) {
    var column = goog.vec.Vec4.create();
    goog.vec.Mat4.getColumn( transform, 0, column );
    goog.vec.Mat4.setColumn( resultTransform, 0, goog.vec.Vec4.scale( column, scale[0], column ) );
    goog.vec.Mat4.getColumn( transform, 1, column );
    goog.vec.Mat4.setColumn( resultTransform, 1, goog.vec.Vec4.scale( column, scale[1], column ) );
    goog.vec.Mat4.getColumn( transform, 2, column );
    goog.vec.Mat4.setColumn( resultTransform, 2, goog.vec.Vec4.scale( column, scale[2], column ) );
    return resultTransform;
  };
  // Get the scale vector for a transform.
  this.transformScale = function( transform, scale ) {
    var column = goog.vec.Vec4.create();
    goog.vec.Mat4.getColumn( transform, 0, column );
    scale[0] = goog.vec.Vec4.magnitude( column );
    goog.vec.Mat4.getColumn( transform, 1, column );
    scale[1] = goog.vec.Vec4.magnitude( column );
    goog.vec.Mat4.getColumn( transform, 2, column );
    scale[2] = goog.vec.Vec4.magnitude( column );
    return scale;
  };
  this.state = function( test ) {
    vwf.logger.info( test, "x", Array.prototype.slice.apply( this.transform || goog.vec.Mat4.createIdentity() ) );
    vwf.logger.info( test, "t", Array.prototype.slice.apply( this.translation || goog.vec.Vec3.create() ) );
    vwf.logger.info( test, "o", Array.prototype.slice.apply( this.rotation || goog.vec.Vec4.createFromValues( 1, 0, 0, 0 ) ) );
    vwf.logger.info( test, "s", Array.prototype.slice.apply( this.scale || goog.vec.Vec3.createFromValues( 1, 1, 1 ) ) );
    vwf.logger.info( test, "q", Array.prototype.slice.apply( this.quaternion || goog.vec.Quaternion.createFromValues( 0, 0, 0, 1 ) ) );
  };
  this.test1 = function() {
    this.transform = [];
    this.translation = [ 50, 0, 0 ];
    this.scale = 2;
    this.state( "test1" );
  };
  this.test2 = function() {
    this.scale = 2;
    this.state( "test2 scale 2" );
    this.scale = 1;
    this.state( "test2 scale 1" );
    this.rotation = [ 0, 0, 1, 30 ];
    this.state( "test2 rotation 30" );
    this.scale = 3;
    this.state( "test2 scale 3" );
    this.rotation = [ 0, 0, 1, -30 ];
    this.state( "test2 rotation -30" );
    this.scale = 1;
    this.state( "test2 scale 1" );
  }; //@ sourceURL=node3.vwf
