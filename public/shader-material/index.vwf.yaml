# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

--- 
extends: http://vwf.example.com/scene.vwf
properties:
  ambientColor: [ 50, 50, 50 ]
children:
  duck:
    extends: http://vwf.example.com/node3.vwf
    implements:
    - http://vwf.example.com/spin-on-click.vwf
    source: duck.dae
    type: model/vnd.collada+xml
    properties:
      # spin-on-click configuration parameters
      spin-axis: [ 0, 0, 1 ]
    children:
      material:
        extends: http://vwf.example.com/shaderMaterial.vwf
        properties:
          uniforms:
            texture:
              type: "t"
              value: 0
          vertexShader: |
            varying vec2 vUv;
            varying vec3 fragNormal;
            void main() {
              fragNormal = normalMatrix * normal;
              vUv = uv;
              vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
              gl_Position = projectionMatrix * mvPosition;
            }
          fragmentShader: |
            uniform sampler2D texture;
            varying vec2 vUv;
            varying vec3 fragNormal;
            void main( void ) {
              vec4 color;
              float angle = 1.0 - acos( dot( normalize( vec3( 0.0, 0.0, 1.0 ) ), normalize( fragNormal ) ) ) / 3.15;
              color.r = ( 1.0 - angle ) + 0.3;
              color.g = ( 1.0 - angle ) + 0.35;
              color.b = ( 1.0 - angle ) + 0.4;
              vec3 tex = texture2D( texture, vUv ).xyz;
              color.xyz += vec3( ( tex.x + tex.y + tex.z ) / 3.0 * 0.25 );
              if ( angle > 0.65 && angle < 0.75 ) {
                color.xyz *= 1.15;
              }
              gl_FragColor = color;
            }
scripts:
- |
    this.initialize = function(){
      this.camera.transform = [ -1,   0,  0, 0, 
                                 0,  -1,  0, 0, 
                                 0,   0,  1, 0, 
                                16, 600, 90, 1 ];
      this.camera.far *= 4;
      this.camera.navmode = "none";
      this.duck.material.uniforms.texture.value = THREE.ImageUtils.loadTexture( "images/duckCM.png" );
      this.duck.material.uniforms = this.duck.material.uniforms;
    }