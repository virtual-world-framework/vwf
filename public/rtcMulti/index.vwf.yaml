# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

--- 
extends: http://vwf.example.com/node2.vwf
properties:
  backgroundColor: "rgba(0,0,0,0)"
  clientColors: [ [ 0, 0, 255 ], [ 255, 0, 0 ], [ 255, 255, 0 ], [ 0, 255, 0 ], [ 0, 255, 255 ], [ 255, 0, 255 ], [ 255, 153, 0 ], [ 153, 153, 153 ], [ 230, 230, 250 ], [ 0, 0, 0 ] ]
methods:
  initializeCamera:
  createConnection:
  removeClient:
  createVideo:
  removeVideo:
children:
  connections:
    extends: http://vwf.example.com/node.vwf
  sceneCenter:
    extends: http://vwf.example.com/node3.vwf
    properties:
      translation: [ 0, 0, 0 ]
scripts:
- |
    this.initialize = function(){
    }

    this.createConnection = function( moniker, loginName, mediaSharing ) {
      
      var clr; 
      var colorList = this.clientColors;
      clr = colorList.shift();
      this.clientColors = colorList;

      var connectionDef = { 
        "extends": "http://vwf.example.com/rtcMulti/connection.vwf",
        "properties": {
          "username": loginName,
          "session": mediaSharing,
          "color": clr
        },
      }
      this.connections.children.create( "connection"+moniker, connectionDef );
    } 
    this.clientMoniker = function( name ) {
        return name.substr( 6, name.length-1 );
    }    
    this.findClient = function( moniker ) {
      var client = undefined;
      var len = this.clients.children.length;
      for ( var i = 0; i < len && client === undefined; i++ ) {
        if ( moniker == this.clientMoniker( this.clients.children[i].name ) ) {
          client = this.clients.children[i];
        }
      }
      return client;
    } 
    this.removeClient = function( moniker ) {
      var client = this.findClient( moniker );
      if ( client ) { 
        var colorList = this.clientColors;
        colorList.push( client.color );
        this.clientColors = colorList;

        if ( client.parent ) {
          client.parent.children.delete( client );
        }
      }
    } //@ sourceURL = index.vwf
