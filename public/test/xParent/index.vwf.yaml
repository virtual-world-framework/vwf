# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

--- 
extends: http://vwf.example.com/navtouch.vwf
properties:
  navmode: walk
  rotationSpeed: 2
  translationSpeed: 10
methods:
  update1:
  update2:
  update3:
  update4:
children:
  topCube:
    includes: spinningCube.vwf
    properties:
      translation: [ 0, 0, 100 ]
    children:
      material:
        extends: http://vwf.example.com/material.vwf
      purpleCube:
        includes: spinningCube.vwf
        properties:
          translation: [ 50, 0, -100 ]
        children:
          material:
            extends: http://vwf.example.com/material.vwf  
            properties:
              color: "purple"
  redCube:
    includes: spinningCube.vwf
    properties:
      translation: [ 100, 0, 0 ]
    children:
      material:
        extends: http://vwf.example.com/material.vwf
        properties:
          color: "red"
  yellowCube:
    extends: http://vwf.example.com/threejs/cube.vwf
    properties:
      meshDefinition: { "height": 25, "width": 25, "depth": 25, color: "greenyellow" }
      translation: [ 150, 0, 0 ]
  greenCube:
    includes: spinningCube.vwf
    properties:
      translation: [ 0, 0, 0 ]
    children:
      material:
        extends: http://vwf.example.com/material.vwf
        properties:
          color: "green"
  blueCube:
    includes: spinningCube.vwf
    properties:
      translation: [ -100, 0, 0 ]
    children:
      material:
        extends: http://vwf.example.com/material.vwf
        properties:
          color: "blue"
  sceneCenter:
    extends: http://vwf.example.com/node3.vwf
    properties:
      translation: [ 0, 0, 0 ]
  dir1:
    extends: http://vwf.example.com/light.vwf
    implements:
    - http://vwf.example.com/glgeLight.vwf
    properties:
      lightType: "point"
      enable: true
      distance: 2000
      intensity: 2
      color: [ 128, 128, 128 ]
      glge-constantAttenuation: 0.3
      glge-linearAttenuation: 0.00000001
      glge-quadraticAttenuation: 0.0000001  
      translation: [ -400, 400, -900 ]
  dir2:
    extends: http://vwf.example.com/light.vwf
    implements:
    - http://vwf.example.com/glgeLight.vwf
    properties:
      lightType: "point"
      enable: true
      distance: 2000
      intensity: 2
      color: [ 128, 128, 128 ]
      glge-constantAttenuation: 0.3
      glge-linearAttenuation: 0.00000001
      glge-quadraticAttenuation: 0.0000001  
      translation: [ 400, 400, 900 ]
scripts:
- |
    this.initialize = function(){
      //console.info( "========== xParent application ==========" );
      this.camera.transform = [ -1,0,0,0, 0,-1,0,0, 0,0,1,0, 0,600,0,1 ];
      this.camera.far = this.camera.far * 4;
      this.future(7).update1( true );
      this.future(13).update2( true );
      this.future(19).update3( true );
      this.future(23).update4( true );

      this.cubes = { 
        "top": this.topCube, 
        "red": this.redCube, 
        "yellow": this.yellowCube,
        "green": this.greenCube, 
        "blue": this.blueCube,
        "purple": this.topCube.purpleCube,
      };
    }
    this.update1 = function( add ){
     
      var wt;
      if ( add ) {
        
        if ( this.cubes.red.parent_ ) {
          wt = this.cubes.red.worldTransform;
          this.cubes.red.parent_ = this.cubes.top; 
          this.cubes.red.worldTransform = wt;

          wt = this.cubes.yellow.worldTransform;
          this.cubes.yellow.parent_ = this.cubes.top; 
          this.cubes.yellow.worldTransform = wt;
        } else {
          wt = this.cubes.red.worldTransform;
          vwf_view.kernel.addChild( this.cubes.top.id, this.cubes.red.id, this.cubes.red.name );
          vwf_view.kernel.setProperty( this.cubes.red.id, "worldTransform", wt ); 

          wt = this.cubes.yellow.worldTransform;
          vwf_view.kernel.addChild( this.cubes.top.id, this.cubes.yellow.id, this.cubes.yellow.name );
          vwf_view.kernel.setProperty( this.cubes.yellow.id, "worldTransform", wt ); 
        }
      } else {
        
        if ( this.cubes.red.parent_ ) {
          wt = this.cubes.red.worldTransform;
          this.cubes.red.parent_ = this;
          this.cubes.red.worldTransform = wt;

          wt = this.cubes.yellow.worldTransform;
          this.cubes.yellow.parent_ = this;
          this.cubes.yellow.worldTransform = wt;
        } else {
          wt = this.cubes.red.worldTransform;
          vwf_view.kernel.addChild( this.id, this.cubes.red.id, this.cubes.red.name );
          vwf_view.kernel.setProperty( this.cubes.red.id, "worldTransform", wt );

          wt = this.cubes.yellow.worldTransform;
          vwf_view.kernel.addChild( this.id, this.cubes.yellow.id, this.cubes.yellow.name );
          vwf_view.kernel.setProperty( this.cubes.yellow.id, "worldTransform", wt );         
        }

      }
      this.future(7).update1( !add );
    }
    this.update2 = function( remove ){
      if ( remove ) {
        vwf_view.kernel.removeChild( this.id, this.cubes.green.id, this.cubes.green.name );
        //this.cubes.green.parent = undefined;
      } else {
        vwf_view.kernel.addChild( this.id, this.cubes.green.id, this.cubes.green.name );
        //this.cubes.green.parent = this;
      }
      this.future(13).update2( !remove );
    }
    this.update3 = function( remove ){
      if ( remove ) {
        vwf_view.kernel.removeChild( this.cubes.top.id, this.cubes.purple.id, this.cubes.purple.name ); 
      } else {
        vwf_view.kernel.addChild( this.cubes.top.id, this.cubes.purple.id, this.cubes.purple.name );
      }
      this.future(23).update3( !remove );
    }     
    this.update4 = function( move ){
      if ( move ) {
        //vwf_view.kernel.moveChild( this.cubes.top.id, this.cubes.blue.id, this.cubes.blue.name ); 
      } else {
        //vwf_view.kernel.moveChild( this.id, this.cubes.blue.id, this.cubes.blue.name );
      }
      this.future(23).update4( !move );
    } //@ sourceURL=index.vwf