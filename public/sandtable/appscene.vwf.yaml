# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

---
extends: http://vwf.example.com/navscene.vwf
properties:
  lineWidth: 32
  lineColor: [ 0, 0, 0 ]
  lineHeight: 100
  objScale: 200
  minDrawDistance:
    set: |
      this.minDrawDistance = value;
      this.minDistanceSquared = value * value;  
    value: 200    
  mouseMode: 
    set: |
      switch( value ) {
        case "look":
        case "orbit":
        case "draw":
        case "pindrop":
          this.mouseMode = value;
          if ( value == "orbit" ) {
            this.navmode = "orbit";
          } else if ( value == "look" ) {
            this.navmode = "walk";
            this.dragModeMove = false;
          } else {
            this.navmode = "none";
          }          
          break;
        default:
          this.logger.debug( "WARNING: walk, look, and draw are the only supported mouseMode" );
          break;
      }
    value: "orbit"
  speed: 40.0
methods:
  clear: |
    if ( this.nodesCreated ) {
      for ( var i = 0; i < this.nodesCreated.length; i++ ){
        this.children.delete( this.getChild(this.nodesCreated[i]) );
      }
      this.nodesCreated = [];  
    }
scripts:
- |
    var counter = 1;
    var lineIndex = 1;
    var cubeIndex = 1;
    var coneIndex = 1;
    var pushpinIndex = 1;
    var line = {
      "extends": "http://vwf.example.com/node3.vwf",
      "type": "definition/mesh",
      "properties": { 
        "meshDefinition": { positions: [], faces: [], color: [] }
      }
    };
    var cube = {
      "extends": "http://vwf.example.com/node3.vwf",
      "type": "definition/mesh",
      "properties": { 
        "meshDefinition": { positions: [], faces: [], color: [] }
      }
    }; 
    var cone = {
      "extends": "http://vwf.example.com/node3.vwf",
      "type": "definition/mesh",
      "properties": { 
        "meshDefinition": { positions: [], faces: [], color: [] }
      }
    };
    var pushpin = {
      extends: "http://vwf.example.com/node3.vwf",
      source: "models/pushpinblack.dae",
      type: "model/vnd.collada+xml",
      properties: { 
        positions: [],
        scale: [ 6, 6, 6.6 ], 
      },    
    };
    // functions
    this.initialize = function() {
      this.lastDrawPoint = undefined;
      this.mouseMode = "orbit";
      this.minDistanceSquared = this.minDrawDistance * this.minDrawDistance;
      this.nodesCreated = [];
      this.originalSpeed = this.speed;
    }
    this.pointerDown = function( parms, pickInfo ){
      if ( pickInfo ) {
        this.lastDrawPoint = { pickInfo: pickInfo };
      } else {
        this.lastDrawPoint = undefined;
      }
    }
    this.pointerMove = function( parms, pickInfo ){
      if ( this.pointerIsDown() ) {
        switch( this.mouseMode ) {
          case "draw":
            if ( this.distanceFromLast( pickInfo ) > this.minDistanceSquared ) {
              this.draw( pickInfo );
            }
            break;
        }
      }
    }
    this.pointerUp = function( parms, pickInfo ){
      switch ( this.mouseMode ) {
        case "pindrop":
          this.pindrop( pickInfo );
          break;  
      }
      this.lastDrawPoint = undefined;    
    }
    this.draw = function( pickInfo ) {
      if ( pickInfo && pickInfo.globalPosition ) {
        if ( this.lastDrawPoint ) {
          var start = this.lastDrawPoint.pickInfo.globalPosition;
          var end = pickInfo.globalPosition;
          var sp = goog.vec.Vec3.createFromArray( [ start[0], start[1], start[2] + this.lineHeight ] );
          var ep = goog.vec.Vec3.createFromArray( [ end[0], end[1], end[2] + this.lineHeight ] );
           
          var pos = [];
          var faces;
          
          var diff = goog.vec.Vec3.createFromArray( [ ep[0] - sp[0], ep[1] - sp[1], ep[2] - sp[2] ] );
          var up = goog.vec.Vec3.createFromArray( [ 0, 1, 0 ] );
          var right = goog.vec.Vec3.createFromArray( [ 1, 0, 0 ] );
          var top = goog.vec.Vec3.createFromArray( [ 0, 0, 0 ] );
          
          goog.vec.Vec3.normalize( diff, diff );

          if ( Math.abs( goog.vec.Vec3.dot( up, diff, goog.vec.Vec3.create() ) ) < .999 ) // diff far enough from up? (.999==2.5 degrees)
          { // then we can cross with up
            goog.vec.Vec3.cross( diff, up, right );
          }
          else
          { //too colinear with up, so start w/ a different axis
            goog.vec.Vec3.cross( diff, right, right );
          }
          top = goog.vec.Vec3.cross( diff, right, top );
          goog.vec.Vec3.normalize( right, right );
          goog.vec.Vec3.normalize( top, top );
          goog.vec.Vec3.scale( right, this.lineWidth, right );
          goog.vec.Vec3.scale( top, this.lineWidth, top );              
          
          pos.push( sp[0] + right[0] );  // 0
          pos.push( sp[1] + right[1] );  // 0
          pos.push( sp[2] + right[2] );  // 0
          
          pos.push( ep[0] + right[0] );  // 1
          pos.push( ep[1] + right[1] );  // 1
          pos.push( ep[2] + right[2] );  // 1
          
          pos.push( sp[0] - right[0] );  // 2
          pos.push( sp[1] - right[1] );  // 2
          pos.push( sp[2] - right[2] );  // 2
          
          pos.push( ep[0] - right[0] );  // 3
          pos.push( ep[1] - right[1] );  // 3
          pos.push( ep[2] - right[2] );  // 3
          
          pos.push( sp[0] + top[0] );  // 4
          pos.push( sp[1] + top[1] );  // 4
          pos.push( sp[2] + top[2] );  // 4
          
          pos.push( ep[0] + top[0] );  // 5
          pos.push( ep[1] + top[1] );  // 5
          pos.push( ep[2] + top[2] );  // 5
          
          pos.push( sp[0] - top[0] );  // 6
          pos.push( sp[1] - top[1] );  // 6
          pos.push( sp[2] - top[2] );  // 6
          
          pos.push( ep[0] - top[0] );  // 7
          pos.push( ep[1] - top[1] );  // 7
          pos.push( ep[2] - top[2] );  // 7
          
          faces = [ 0, 1, 3, 0, 3, 2, 4, 5, 7, 4, 7, 6 ];
          
          var newLine = $.extend(true, {}, line);
          newLine.properties.meshDefinition.positions = pos;
          newLine.properties.meshDefinition.faces = faces;
          newLine.properties.meshDefinition.color = this.lineColor;
          
          this.children.create("line"+lineIndex, newLine);
          this.nodesCreated.push( "http-vwf-example-com-node3-vwf-line"+lineIndex );
          lineIndex++;
          
          this.lastDrawPoint.pickInfo = pickInfo;
        }
        
      }
    }
    this.pindrop = function( pickInfo ) {
      
      if ( pickInfo && pickInfo.globalPosition ) {
        pushpin.properties.translation = pickInfo.globalPosition;
        
        if ( this.lineColor[0] == 255 && this.lineColor[1] == 0 && this.lineColor[2] == 0 ) 
          pushpin.source = "models/pushPinRed.dae";
        else if ( this.lineColor[0] == 0 && this.lineColor[1] == 255 && this.lineColor[2] == 0 ) 
          pushpin.source = "models/pushPinGreen.dae";
        else if ( this.lineColor[0] == 0 && this.lineColor[1] == 0 && this.lineColor[2] == 255 ) 
          pushpin.source = "models/pushPinBlue.dae";
        else if ( this.lineColor[0] == 0 && this.lineColor[1] == 0 && this.lineColor[2] == 0 ) 
          pushpin.source = "models/pushPinBlack.dae";
        else 
          pushpin.source = "models/pushPinYellow.dae";
        
        var name = "pushpin"+pushpinIndex;
        this.children.create(name, pushpin);
        this.nodesCreated.push( "http-vwf-example-com-node3-vwf-"+name );
        pushpinIndex++;        
        
        //var pt = parms.pickInfo.coord;
        //var dim = this.objScale;
        //this.createCube( pt[0], pt[1], pt[2]+this.lineHeight+(dim*0.3), dim, dim, dim, this.lineColor, true );
        //this.createCone( pt[0], pt[1], pt[2]+this.lineHeight+(dim*0.3), (dim*0.3), dim, this.lineColor, 18, true );
        //this.createLine( pt[0], pt[1], pt[2]+this.lineHeight+(dim*0.3), pt[0], pt[1], pt[2], this.lineWidth*0.3, [ 0, 0, 0 ], true );
      }
    }
    this.distanceFromLast = function( pickInfo ) {
      var distSquared = 0;
      if ( pickInfo && pickInfo.globalPosition ) {
        if ( this.lastDrawPoint ) {
          var p1 = pickInfo.globalPosition;
          var p2 = this.lastDrawPoint.pickInfo.globalPosition;
          distSquared = Math.pow( p1[0] - p2[0], 2 ) + Math.pow( p1[1] - p2[1], 2 );
        }
      }
      return distSquared;
    }
    this.createCube = function( x, y, z, dx, dy, dz, color, temp ) {
      var pos = [];
      var faces;
      
      pos.push( x + ( 0.5 * dx ) );
      pos.push( y + ( 0.5 * dy ) );  // 0
      pos.push( z + ( 0.5 * dz ) );
      
      pos.push( x + ( -0.5 * dx ) );
      pos.push( y + ( 0.5 * dy ) );  // 1
      pos.push( z + ( 0.5 * dz ) );
      
      pos.push( x + ( -0.5 * dx ) );
      pos.push( y + ( -0.5 * dy ) ); // 2
      pos.push( z + ( 0.5 * dz ) ); 
      
      pos.push( x + ( 0.5 * dx ) );
      pos.push( y + ( -0.5 * dy ) ); // 3
      pos.push( z + ( 0.5 * dz ) );
      
      pos.push( x + ( 0.5 * dx ) );
      pos.push( y + ( 0.5 * dy ) ); // 4
      pos.push( z + ( -0.5 * dz ) );
      
      pos.push( x + ( -0.5 * dx ) );
      pos.push( y + ( 0.5 * dy ) );  // 5
      pos.push( z + ( -0.5 * dz ) );
      
      pos.push( x + ( -0.5 * dx ) );
      pos.push( y + ( -0.5 * dy ) );  // 6
      pos.push( z + ( -0.5 * dz ) );
      
      pos.push( x + ( 0.5 * dx ) );
      pos.push( y + ( -0.5 * dy ) ); // 7
      pos.push( z + ( -0.5 * dz ) );      
      
      faces = [ 1, 0, 3, 1, 3, 2, 3, 0, 4, 3, 4, 7, 2, 3, 7, 2, 7, 6, 6, 7, 4, 6, 4, 5, 1, 2, 6, 1, 6, 5, 0, 1, 5, 0, 5, 4 ];

      cube.properties.meshDefinition.positions = pos;
      cube.properties.meshDefinition.faces = faces;
      cube.properties.meshDefinition.color = color;
      
      this.children.create("cube"+cubeIndex, cube);
      if ( temp ) this.nodesCreated.push( "http-vwf-example-com-node3-vwf-cube"+cubeIndex );
      cubeIndex++;
    }
    this.createLine = function( x1, y1, z1, x2, y2, z2, thickness, color, temp ) {
      var pos = [];
      var faces;
      
      var diff = goog.vec.Vec3.createFromArray( [ x2 - x1, y2 - y1, z2 - z1 ] );
      var up = goog.vec.Vec3.createFromArray( [ 0, 1, 0 ] );
      var right = goog.vec.Vec3.createFromArray( [ 1, 0, 0 ] );
      var top = goog.vec.Vec3.createFromArray( [ 0, 0, 0 ] );
      
      goog.vec.Vec3.normalize( diff, diff );

      if ( Math.abs( goog.vec.Vec3.dot( up, diff, goog.vec.Vec3.create() ) ) < .999 ) // diff far enough from up? (.999==2.5 degrees)
      { // then we can cross with up
        goog.vec.Vec3.cross( diff, up, right );
      }
      else
      { //too colinear with up, so start w/ a different axis
        goog.vec.Vec3.cross( diff, right, right );
      }
      goog.vec.Vec3.cross( diff, right, top );
      goog.vec.Vec3.normalize( right, right );
      goog.vec.Vec3.normalize( top, top );
      goog.vec.Vec3.scale( right, thickness, right );
      goog.vec.Vec3.scale( top, thickness, top );              
      
      pos.push( x1 + right[0] );  // 0
      pos.push( y1 + right[1] );  // 0
      pos.push( z1 + right[2] );  // 0
      
      pos.push( x2 + right[0] );  // 1
      pos.push( y2 + right[1] );  // 1
      pos.push( z2 + right[2] );  // 1
      
      pos.push( x1 - right[0] );  // 2
      pos.push( y1 - right[1] );  // 2
      pos.push( z1 - right[2] );  // 2
      
      pos.push( x2 - right[0] );  // 3
      pos.push( y2 - right[1] );  // 3
      pos.push( z2 - right[2] );  // 3
      
      pos.push( x1 + top[0] );  // 4
      pos.push( y1 + top[1] );  // 4
      pos.push( z1 + top[2] );  // 4
      
      pos.push( x2 + top[0] );  // 5
      pos.push( y2 + top[1] );  // 5
      pos.push( z2 + top[2] );  // 5
      
      pos.push( x1 - top[0] );  // 6
      pos.push( y1 - top[1] );  // 6
      pos.push( z1 - top[2] );  // 6
      
      pos.push( x2 - top[0] );  // 7
      pos.push( y2 - top[1] );  // 7
      pos.push( z2 - top[2] );  // 7
      
      faces = [ 0, 1, 3, 0, 3, 2, 4, 5, 7, 4, 7, 6 ];
      
      line.properties.meshDefinition.positions = pos;
      line.properties.meshDefinition.faces = faces;
      line.properties.meshDefinition.color = color;
      
      this.children.create("line"+lineIndex, line);
      if ( temp ) this.nodesCreated.push( "http-vwf-example-com-node3-vwf-line"+lineIndex );
      lineIndex++;    
    }
    this.createCone = function( x, y, z, radius, height, color, accuracy, temp ) {
      var pos = [];
      var faces = [];
      var pt = 1;
      
      pos.push( x );
      pos.push( y );
      pos.push( z + height );      
      
      for ( var theta = 0; theta <= 2 * Math.PI; theta += Math.PI / accuracy ) {
        pos.push( x + ( radius * Math.cos( theta ) ) );
        pos.push( y + ( radius * Math.sin( theta ) ) );
        pos.push( z );
        pos.push( x + ( radius * Math.cos( theta - Math.PI / accuracy ) ) );
        pos.push( y + ( radius * Math.sin( theta - Math.PI / accuracy ) ) );
        pos.push( z );
        
        faces.push( 0 );
        faces.push( pt );
        faces.push( pt + 1 );
        pt += 2;
      }
      cone.properties.meshDefinition.positions = pos;
      cone.properties.meshDefinition.faces = faces;
      cone.properties.meshDefinition.color = color;
      
      this.children.create("cone"+coneIndex, cone);
      if ( temp ) this.nodesCreated.push( "http-vwf-example-com-node3-vwf-cone"+coneIndex );
      coneIndex++; 
    } //@ sourceURL=appScene.vwf
