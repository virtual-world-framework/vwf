# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

---
extends: http://vwf.example.com/node3.vwf
properties:
  translationSpeed: 1200
  initialBoundingBoxBefore: [[-75,-75],[-75,75],[600,75],[600,-75]]
  initialBoundingBoxAfter: [[-600,-75],[-600,75],[75,75],[75,-75]]
  collisionInfo:
  laserDirection: 
  parentTank: 
  enabled: false
methods:
  fire:
  processFire:
  explode: 
  clean: 
  calculateCollisionInfo:
scripts:
- |
  this.fire = function() {
    this.laserModel.visible = true;
    this.laserParticle.visible = true;
    this.explosion.visible = false;
    this.processFire(0.05);
  };
  this.calculateCollisionInfo = function(translateDelta, checkBefore) {
    var newCollisionInfo = {};
    var myRotation = 0;
    if ( this.laserDirection ) {
      var laserDirectionFlat = [this.laserDirection[0], this.laserDirection[1], 0];
      var laserDirectionMag = goog.vec.Vec3.magnitude(laserDirectionFlat);
      var laserDirectionUpdate = [this.laserDirection[0] / laserDirectionMag, this.laserDirection[1] / laserDirectionMag];    
      myRotation = Math.atan2(laserDirectionUpdate[1], laserDirectionUpdate[0]);
    }
    
    var mySin = Math.sin( myRotation );
    var myCos = Math.cos( myRotation );
    var myTranslation = this.translation;
    myTranslation[0] = myTranslation[0] + translateDelta[0];
    myTranslation[1] = myTranslation[1] + translateDelta[1];
    var newBox = [];
    var myBoundingBox;
    if ( checkBefore ) {
      myBoundingBox = this.initialBoundingBoxBefore;
    }
    else {
      myBoundingBox = this.initialBoundingBoxAfter;
    }
    for ( var index = 0; index < 4; index++ ) {
      var newPoint = [ myBoundingBox[ index ][ 0 ] *  myCos - myBoundingBox[ index ][ 1 ] * mySin + myTranslation[ 0 ], myBoundingBox[ index ][ 1 ] * myCos + myBoundingBox[ index ][ 0 ] * mySin + myTranslation[ 1 ] ];
      newBox.push( newPoint );
    }
    newCollisionInfo[ 'corners' ] = newBox;
    newCollisionInfo[ 'bounds' ] = this.parent.parent.generateBoundsForCorners( newBox );
    newCollisionInfo[ 'axes' ] = this.parent.parent.generateAxesForCorners( newBox );
    return newCollisionInfo;
  };
  this.initialize = function() {
    //this.lastUpdateTime = this.time;
    if ( this.enabled ) {
      this.future(0.05).fire();
    }
  }
  this.getCameraVec = function( x, y, z ) {
      var camRotMat = this.rotationMatrix;
      var camAt = goog.vec.Mat4.multVec4(
        camRotMat,
        goog.vec.Vec4.createFromValues( x, y, z, 1 ),
        goog.vec.Vec3.create()
      );
      return camAt;      
  }
  this.timeElapsed = function() {
    var timeElapsed = this.time - this.lastUpdateTime;
    if ( !this.lastUpdateTime || timeElapsed > 1 ) {
      timeElapsed = 1;  
    }
    return timeElapsed;
  }
  this.distance = function() {
    var dist = this.translationSpeed * 10;
    if(this.timeElapsed() > 0) {
      dist = dist * this.timeElapsed();
    }
    this.lastUpdateTime = this.time;
    return dist;
  }
  this.processFire = function() {
    if(this.laserDirection) {
      var collision, inBounds;
      if(this.laserDirection[2] != 0) {
        this.laserDirection[2] = 0;
      }

      this.collisionInfo = this.calculateCollisionInfo( [ 0, 0 ], true );
      collision = this.parent.parent.collisionDetection( this.collisionInfo, this.parentTank );
      if(!collision) {
        if ( goog.vec.Vec3.magnitudeSquared( this.laserDirection ) > goog.vec.EPSILON ) {
          var trans = goog.vec.Vec3.scale(
              this.laserDirection,
              this.distance(),
              goog.vec.Vec3.create()
          );
          this.collisionInfo = this.calculateCollisionInfo( [ trans[ 0 ], trans[ 1 ] ], false );
          collision = this.parent.parent.collisionDetection( this.collisionInfo, this.parentTank );
          if(!collision) {
            this.translation = goog.vec.Vec3.add(
              this.translation,
              trans,
              trans
            );
            this.laserParticle.worldTransform = this.worldTransform;
          }
          else {
            if ( this.parent.parent.bz_world.id != collision.id ) {
              var players = this.parent.parent.findPlayers( );
              for( var i = 0; i < players.length; i++ ) {
                if ( players[ i ].id == collision.id ) {
                  players[ i ].active = false;
                  players[ i ].visible = false;
                  players[ i ].playerDeaths += 1;
                  this.parent.parent.events.playerDestroyed( players[ i ].id, players[ i ].playerName, players[ i ].score);
                }
                else if ( players[ i ].id == this.parentTank ) {
                  players[ i ].playerKills += 1;
                  this.parent.parent.events.playerScored( players[ i ].id, players[ i ].playerName, players[ i ].score );
                }
              }
            }
            this.explode( );
          }
        }
      }
      else {
        if( this.parent.parent.bz_world.id != collision.id ) {
          var players = this.parent.parent.findPlayers( );
          for( var i = 0; i < players.length; i++ ) {
            if ( players[ i ].id == collision.id ) {
              players[ i ].active = false;
              players[ i ].visible = false;
              players[ i ].playerDeaths += 1;
              this.parent.parent.events.playerDestroyed( players[ i ].id, players[ i ].playerName, players[ i ].score );
            }
            else if ( players[ i ].id == this.parentTank ) {
              players[ i ].playerKills += 1;
              this.parent.parent.events.playerScored( players[ i ].id, players[ i ].playerName, players[ i ].score );
            }
          }
        }
        this.explode();
      }
      if(!collision) {
        this.future(0.1).processFire();
      }
    }
  }
  this.explode = function() {
    this.laserParticle.visible = false;
    this.laserModel.visible = false;
    if ( this.explosion ) {
      this.explosion.worldTransform = this.worldTransform;
      this.explosion.visible = true;
    }
    else {
      var newExplosion = $.extend(true, {}, explosion);
      newExplosion.properties.worldTransform = this.worldTransform;
      this.children.create("explosion", newExplosion);
    }
    this.future(5.0).clean();
  }
  this.clean = function() {
    this.explosion.visible = false;
    this.enabled = false;
  }
