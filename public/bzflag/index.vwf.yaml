# Copyright 2012 United States Government, as represented by the Secretary of Defense, Under
# Secretary of Defense (Personnel & Readiness).
# 
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

---
extends: appscene.vwf
properties:
  backgroundColor: [ 83, 157, 194 ]
  ambientColor: [ 250, 250, 250 ]
  colorIndex: 0
  laserCount: 0
  ## The sorted list of scores for all players
  ##
  ## @name appscene.vwf#scoreBoard
  ## @property
  scoreBoard: 
    get: |
      var scoreBoard = [];
      var players = this.findPlayers();
      if ( players ) {
        for ( var i = 0; i < players.length; i++) {
          scoreBoard.push( {
            id: players[ i ].id, 
            name: players[ i ].playerName, 
            score: players[ i ].score,
            playerKills: players[ i ].playerKills,
            playerDeaths: players[ i ].playerDeaths
          } );
        }
      }
      scoreBoard.sort(function(a,b) {
        return b.score - a.score;
      } );
      return scoreBoard;
  usersShareView: false
  makeOwnAvatarVisible: true
  userObject:
    extends: tank.vwf
    implements: [ "http://vwf.example.com/navigable.vwf" ]
    properties:
      active: false
      laserCount: 0
      color: 
      laserMaterial: 
      startingTranslation: []
      translation: [0, 0, 1800]
      translationSpeed: 400
      rotationSpeed: 0.3
      playerName:
      playerConnected: true
      # Disable inherited navigation so it can use custom bzflag controls
      navmode: none
      visible: false
    children:     
      camera:
        extends: http://vwf.example.com/camera.vwf
        properties:
          translation: [0, 100, 450]
          far: 1000000
          near: 1
      avatar:
        extends: http://vwf.example.com/node3.vwf
        source: models/tank.dae
        type: model/vnd.collada+xml
        properties: 
          rotation: [0, 0, 1, 180]
          scale: 115
        children: 
          Tank: 
            extends: http://vwf.example.com/node3.vwf
            children: 
              material: 
                extends: http://vwf.example.com/material.vwf
methods:
  initializeCamera:
  createPlayer:
  rejoinPlayer: 
  fireLaser:
  sendChat:
events:
  playerCreatedOrRejoined:
  playerJoined:
  playerDestroyed: 
  playerRespawned:
  playerScored: 
  chatSent:
  laserFired:
children:
  bz_world:
    extends: bzworld.vwf
  background:
    extends: http://vwf.example.com/node3.vwf
    source: models/skydome.dae
    type: model/vnd.collada+xml
    properties:
      rotation: [ 1, 0, 0, 0 ]
      translation: [ 0, 0, -5000 ]
  lasers:
    extends: http://vwf.example.com/node3.vwf
scripts:
- |
  var tankMaterials = [ "models/images/blue_tank.png", "models/images/green_tank.png", "models/images/hunter_tank.png", 
    "models/images/purple_tank.png", "models/images/rabbit_tank.png", "models/images/red_tank.png", 
    "models/images/rogue_tank.png" ];
  var tankColors = [ "#1647C4", "#537737", "#F2521E", "#61378A", "#FFFFFF", "#FF0000", "#000000" ];
  var tankStartingPositions = [[0,10,100],[-13000,31000,100],[-37000,7000,100],
    [-15000,-40000,100],[10000,-25000,100],[30000,12000,100],[-60000,-17000,100]];
  var laserMaterials = ["images/blue_bolt.png", "images/green_bolt.png", "images/hunter_bolt.png", "images/purple_bolt.png", 
    "images/rabbit_bolt.png", "images/red_bolt.png", "images/rogue_bolt.png"];
  
  var bolt = {
    extends: "laser.vwf",
    properties: {
      laserDirection: [],
      parentTank: "",
      enabled: false,
      translation: [],
    },
    children: {
      laserModel: {
        extends: "http://vwf.example.com/node3.vwf",
        source: "models/bolt.dae",
        type: "model/vnd.collada+xml",
        properties: {
          visible: false
        }
      },
      laserParticle: { 
        extends: "http://vwf.example.com/particlesystem.vwf",
        properties: {
          particleCount: 1,
          maxLifeTime: 210000,
          minLifeTime: 170000,
          startSize: 400,
          endSize: 400,
          loop: true,
          translation: [],
          visible: false,
          minVelocity: [ 0, 0, 0.0],
          maxVelocity: [ 0, 0, 0],
          maxAcceleration: [ 0, 0, 0.0],
          minAcceleration: [ 0, 0, 0.0],
          sizeRange: 0,
          startColor: [ 1, 1, 1, 1],
          endColor: [ 1, 1, 1, 1],
          colorRange: [ .2, .1, .1, 0],
          additive: false,
          depthTest: true,
          depthWrite: false,
          maxOrientation: 0,
          minOrientation: 0,
          emitterSize: [ 500 , 0 , 500.0 ],
          emitterType: "point",
          textureTiles: 1,
          image: "",
        }
      },
      explosion: {
        extends: "http://vwf.example.com/particlesystem.vwf",
        properties: {
          particleCount: 100,
          maxLifeTime: 1000,
          minLifeTime: 1000,
          startSize: 400,
          endSize: 400,
          loop: false,
          image: "images/explode.png",
          minVelocity: [ -0.2, -0.2, -0.2 ],
          maxVelocity: [ 0.2, 0.2, 0.2 ],
          translation: [],
          sizeRange: 0,
          startColor: [ 1, 1, 1, 1],
          endColor: [ 1, 1, 1, 1],
          colorRange: [ .2, .1, .1, 0],
          additive: false,
          depthTest: true,
          depthWrite: false,
          maxOrientation: 0,
          minOrientation: 0,
          emitterSize: [ 500 , 0 , 500.0 ],
          emitterType: "point",
          visible: false,
          textureTiles: 1,
        }
      }
    }
  };

  this.initialize = function() {
    for ( var i = 0; i < 50; i++ ) {
      var newBolt = $.extend(true, {}, bolt);
      newBolt.properties.enabled = false;
      newBolt.children.laserParticle.properties.image = laserMaterials[0];
      this.lasers.children.create("Laser"+this.laserCount, newBolt);
      this.laserCount += 1;
    }
    this.future( 0 ).initializeCamera();
  }
  this.initializeCamera = function() {
    this.camera.translation = [ 0, 0, 1800 ];
    this.camera.far = 1000000;
    this.camera.near = 1;
  }
  //Create player has two options.
  //  The player exists. In which case, fail and return false.
  //  The player doesn't exist. In which case, suceed and return true.
  this.createPlayer = function(playerName, playerMoniker) {
    var playerObject = this.findPlayerByName(playerName);
    if( playerObject ) {
      var allowRejoin = false;
      if ( playerObject.isConnected ) {
        if ( playerObject.id.length > 16 ) {
          if ( playerObject.id.slice( playerObject.id.length - 16 ) == playerMoniker ) {
            allowRejoin = true;
          }
        }
      }
      else {
        allowRejoin = true;
      }
      if ( ( allowRejoin ) && ( !playerObject.active ) ) {
        playerObject.translation = playerObject.startingTranslation;
        playerObject.cachedBoundingBox = playerObject.worldBoundingBox;
        playerObject.active = true;
        playerObject.visible = true;
        playerObject.junk = 1;
        this.playerRespawned( playerName );
        this.playerCreatedOrRejoined( true, playerName, playerMoniker );
        return;
      }
    }
    else {
      playerObject = this.find("/navobj_" + playerMoniker);
      if(playerObject.length) {
        playerObject = playerObject[0];
        var tankTexture = tankMaterials[this.colorIndex];
        playerObject.avatar.Tank.material.properties['texture'] = tankTexture;
        playerObject.color = tankColors[this.colorIndex];
        playerObject.translation = tankStartingPositions[this.colorIndex];
        playerObject.startingTranslation = tankStartingPositions[this.colorIndex];
        playerObject.laserMaterial = laserMaterials[this.colorIndex];
        playerObject.active = true;
        playerObject.playerName = playerName;
        playerObject.visible = true;
        playerObject.junk = 1;
        this.playerJoined( playerName );
        this.playerCreatedOrRejoined( true, playerName, playerMoniker );
        this.colorIndex += 1;
        if ( this.colorIndex >= tankMaterials.length ) {
          this.colorIndex = 0;
        }
        return;
      }
    }
    this.playerCreatedOrRejoined( false, playerName, playerMoniker );
  }
  
  this.rejoinPlayer = function(playerName, playerMoniker) {
    var oldPlayerObject = this.findPlayerByName(playerName);
    if(oldPlayerObject) {
      var allowRejoin = false;
      var needToDelete = false;
      if ( oldPlayerObject.playerConnected ) {
        if ( oldPlayerObject.id.length > 16 ) {
          if ( oldPlayerObject.id.slice( oldPlayerObject.id.length - 16 ) == playerMoniker ) {
            allowRejoin = true;
          }
        }
      }
      else {
        allowRejoin = true;
        needToDelete = true;
      }
      if ( allowRejoin ) {
        var playerObject = this.find("/navobj_" + playerMoniker);
        if(playerObject.length) {
          playerObject = playerObject[0];

          // Copy over all important data from the old player object
          playerObject.avatar.Tank.material.properties['texture'] = oldPlayerObject.avatar.Tank.material.properties['texture'];
          playerObject.color = oldPlayerObject.color;
          playerObject.startingTranslation = oldPlayerObject.startingTranslation;
          if(!oldPlayerObject.active) {
            playerObject.translation = playerObject.startingTranslation;
          }
          else {
            playerObject.worldTransform = oldPlayerObject.worldTransform;
          }
          playerObject.laserMaterial = oldPlayerObject.laserMaterial;
          playerObject.playerKills = oldPlayerObject.playerKills;
          playerObject.playerDeaths = oldPlayerObject.playerDeaths;
          playerObject.active = true;
          playerObject.visible = true;
          playerObject.junk = 1;

          playerObject.playerName = playerName;

     
          this.playerJoined( playerName );
          this.playerCreatedOrRejoined( true, playerName, playerMoniker);
          if ( needToDelete ) {
            this.children.delete( oldPlayerObject );
          }
          return;
        }
      }
    }
    else {
      this.createPlayer(playerName, playerMoniker);
      return;
    }
    this.playerCreatedOrRejoined( false, playerName, playerMoniker);
  }
  
  this.fireLaser = function(playerName) {
    if ( playerName )
    {
      var player = this.findPlayerByName(playerName);
      if ( ( player ) && ( player.active ) ) {
        if ( player.lastFired > 0 ) {
          if ( ( this.time - player.lastFired ) < 0.25 ) {
            return;
          }
        }
        player.lastFired = this.time;
        var oldBolt = this.findUnusedLaser( );
        if ( oldBolt ) {
          oldBolt.enabled = true;
          oldBolt.translation = [player.translation[0], player.translation[1], player.translation[2] + 100];
          oldBolt.laserParticle.translation = [player.translation[0], player.translation[1], player.translation[2] + 100];
          oldBolt.laserParticle.image = player.laserMaterial;
          oldBolt.laserDirection = goog.vec.Mat4.multVec3(player.rotationMatrix, [0,1,0], goog.vec.Vec3.create());
          oldBolt.parentTank = player.id;
          oldBolt.lastUpdateTime = this.time;
          oldBolt.collisionInfo = undefined;
          oldBolt.future(0.05).fire();
        }
        else {
          var newBolt = $.extend(true, {}, bolt);
          newBolt.properties.translation = [player.translation[0], player.translation[1], player.translation[2] + 100];
          newBolt.children.laserParticle.properties.translation = [player.translation[0], player.translation[1], player.translation[2] + 100];
          newBolt.children.laserParticle.properties.image = player.laserMaterial;
          newBolt.properties.laserDirection = goog.vec.Mat4.multVec3(player.rotationMatrix, [0,1,0], goog.vec.Vec3.create());
          newBolt.properties.parentTank = player.id;
          newBolt.properties.enabled = true;
          this.lasers.children.create("Laser"+this.laserCount, newBolt);
          this.laserCount += 1;
        }
        this.laserFired();
      }
    }
  }
  this.sendChat = function(playerName, chatToSend) {
    var player = this.findPlayerByName(playerName);
    this.chatSent( playerName, chatToSend, player.color );
  } //@ sourceURL=index.vwf
