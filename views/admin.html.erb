<html xmlns="http://www.w3.org/1999/xhtml">

    <head>

        <title>Admin</title>

        <script type="text/javascript" src="../jquery-1.10.2.min.js"></script>
        <script type="text/javascript" src="../jquery-ui-1.10.3.custom.min.js"></script>
        <script type="text/javascript" src="../async.js"></script>

        <script type="text/javascript">if (!window.WebSocket && window.MozWebSocket) window.WebSocket=window.MozWebSocket</script> <!-- for Firefox 5 -->
        <script type="text/javascript" src="../socket.io.js"></script>

        <script type="text/javascript" src="vwf.js"></script>

        <script type="text/javascript" src="vwf-view.js"></script>
        <script type="text/javascript" src="vwf-view-html.js"></script>

        <script type="text/javascript" src="require.js"></script>

        <script type="text/javascript">

            require( [

                "domReady",

                "vwf/kernel/model",
                "vwf/model/javascript",
                "vwf/model/object",
                "vwf/model/stage/log",
                "vwf/kernel/view",

            ], function( ready ) {

                ready( function() {

                    vwf.initialize( [
                        "vwf/model/javascript",
                        "vwf/model/object",
                    ], [
                        { "html": "#listing" }
                    ] );

                    $( "#tabs" ).tabs();

                    // ---------------------------------------------------------------------------------

                    try {
                        socket = new io.Socket( undefined, {
                            resource: window.location.pathname.slice( 1, window.location.pathname.lastIndexOf("/") ),
                            transports: [ 'websocket' ],
                        } );
                    } catch ( e ) {
                    }

                    if ( socket ) {

                        socket.on( "connect", function() {
                            console.info( "admin socket connected" )
                        } );

                        socket.on( "message", function( message ) {

                            var fields = JSON.parse( message );

                            if ( fields.action ) {

                                var now$ = jQuery( "#log .now" );
                                var action$ = now$.clone().removeClass( "now" );

                                action$.children().each( function( index ) {

                                    switch( index ) {
                                        case 0: jQuery( this ).text( Number( fields.time ).toFixed( 3 ) ); break;
                                        case 1: jQuery( this ).text( command_from_fields( fields ) ); break;
                                    }

                                } );

                                var body$ = $("body"); // may need to be $("html") in other browsers, or maybe even $(document)
                                body$.stop( true, true );

                                // Window bottom in document coordinates.

                                var window_bottom = body$.scrollTop() + $(window).height();

                                // tr.now top, middle, and bottom in document coordinates.

                                var now_top_before = now$.offset().top;
                                var now_middle_before = now_top_before + now$.outerHeight() / 2;
                                var now_bottom_before = now_top_before + now$.outerHeight();

                                // Insert the new row.

                                now$.before( action$ );

                                // tr.now top, middle, and bottom in document coordinates.

                                var now_top_after = now$.offset().top;
                                var now_middle_after = now_top_after + now$.outerHeight() / 2;
                                var now_bottom_after = now_top_after + now$.outerHeight();

                                // Scroll to reveal now$ if it was visible before the new row was
                                // inserted.

                                if ( now_middle_before <= window_bottom ) {
                                    if ( now_bottom_before >= window_bottom ) {
                                        body$.animate( { scrollTop: now_top_after + now$.outerHeight() - $(window).height() }, "fast" );
                                    } else if ( now_bottom_after >= window_bottom ) {
                                        body$.animate( { scrollTop: body$.scrollTop() + now_top_after - now_top_before }, "fast" );
                                    }
                                }

                            } else {

                                // Update now$ with the most recent time.

                                var now$ = jQuery( "#log .now" );
                                now$.children().first().text( Number( fields.time ).toFixed( 3 ) );

                            }

                        } );

                        socket.on( "disconnect", function() {
                            console.info( "admin socket disconnected" )
                        } );

                        // Start communication with the reflector. 

                        socket.connect();

                    }

                    // Create a JavaScript-like statement that describes the action.

                    function command_from_fields( fields ) {

                        var command = "";

                        if ( fields.node || fields.node === 0 ) {
                            command += "@" + safe_identifier( fields.node ) + ".";
                        }

                        if ( fields.action == "createNode" ) {

                            command += "create";
                            command += fields.parameters.length ? "( " + parameter_list( fields.parameters ) + " )" : "()";

                        } else if ( fields.action == "setProperty" ) {

                            command += safe_identifier( fields.member ) + " = " +
                                JSON.stringify( fields.parameters.shift() );

                        } else if ( fields.action == "callMethod" ) {

                            command += safe_identifier( fields.member );
                            command += fields.parameters.length ? "( " + parameter_list( fields.parameters ) + " )" : "()";

                        } else {
                            
                            command += fields.action;
                            command += fields.parameters.length ? "( " + parameter_list( fields.parameters ) + " )" : "()";

                        }

                        return command;

                    }

                    // Return *identifier* unchanged if it's a valid identifier in the common form of an
                    // alphabetic character or underscore followed by zero or more digits, alphabetic
                    // characters or underscores. Otherwise, return *identifier* string-quoted.

                    function safe_identifier( identifier ) {
                        identifier = identifier.toString();
                        return identifier.search( /^[A-Za-z_][0-9A-Za-z_]*$/ ) >= 0 ? identifier : JSON.stringify( identifier );
                    }

                    function parameter_list( parameters ) {
                        return parameters.map( function( parameter ) {
                            return JSON.stringify( parameter ).substring( 0, 100 );
                         } ).join( ", " );
                    }

                    // ---------------------------------------------------------------------------------

                    var options = {};

                    [ "play", "pause", "stop" ].forEach( function( state ) {
                        options[state] = { icons: { primary: "ui-icon-" + state }, label: state, text: false };
                    } );

                    options.rate = { value: 0, min: -2, max: 2, step: 0.1, };

                    var state = {};

                    jQuery.get( "admin/state", undefined, update, "json" );

                    jQuery( "button#play" ).button(
                        options.pause
                    ). click( function() {
                        jQuery.post( state.playing ? "admin/pause" : "admin/play", undefined, update, "json" );
                    } );

                    jQuery( "button#stop" ).button(
                        options.stop
                    ). click( function() {
                        jQuery.post( "admin/stop", undefined, update, "json" );
                    } );

                    jQuery( ".rate.slider" ).slider(
                        options.rate
                    ) .bind( "slide", function( event, ui ) {
                        jQuery.get( "admin/state", { "rate": Math.pow( 10, Number(ui.value) ) }, update, "json" );
                    } );

                    function update( data ) {

                        state = data;

                        jQuery( "button#play" ).button( "option", state.playing ? options.pause : options.play );
                        jQuery( "button#stop" ).button( "option", "disabled", state.stopped );


                        jQuery( ".rate.slider" ).slider( "value", Math.log( state.rate ) / Math.LN10 );


                        if ( state.rate < 1.0 ) {
                            var label_rate = 1.0 / state.rate;
                        } else {
                            var label_rate = state.rate;
                        }

                        var label = label_rate.toFixed(2).toString().replace( /(\.\d*?)0+$/, "$1" ).replace( /\.$/, "" );

                        if ( state.rate < 1.0 ) {
                            label = "&#x2215; " + label;
                        } else {
                            label = label + " &times;";
                        }

                        jQuery( ".rate.vwf-label" ).html( label );

                    }

                } );

            } );

        </script>

        <link rel="stylesheet" type="text/css" href="index.css" />
        <link rel="stylesheet" type="text/css" href="jquery-ui-1.10.3.custom.min.css" />

        <style type="text/css">

            body {
                background-color: white;
            }

            #tabs {
                min-height: 1024px;
                // background-image: url(vwl800.jpg);
                background-position: center top;
                background-repeat: repeat-y;
                background-attachment: scroll;
            }

            #log > * {
                margin: 0;
                font-family: "Bitstream Vera Sans Mono", "Courier New", monospace;
            }

            #log > :nth-child(even) {
                background-color: #ffffff;
            }

            #log > :nth-child(odd) {
                background-color: #f8f8f8;
            }

            span.time {
                display: inline-block;
                padding: 5px;
            }

            span.action {
                display: inline-block;
                padding: 5px;
            }

            .time {
                width: 10em;
                text-align: right;
                padding-right: 1ex;
            }

            .action {
                text-align: left;
                padding-left: 1ex;
            }

            .rate.slider {
                display: inline-block;
                width: 10em;
            }

        </style>

    </head>

    <body>

        <h1>Virtual World Framework Administration</h1>

        <p>
            <span class="time">
                <button id="play"></button>
                <button id="stop"></button>
            </span>
            <span class="action">
                <span class="rate slider"></span>&nbsp;
                <span class="rate vwf-label" style="display: inline-block; width:8ex"></span>
            </span>
        </p>

        <div id="tabs">

            <ul>
                <li><a href="#listing">Listing</a></li>
                <li><a href="#log">Log</a></li>
            </ul>

            <div id="listing">
            </div>

            <div id="log">
                <p class="now">
                    <span class="time"></span>
                    <span class="action"></span>
                </p>
            </div>

        </div>

    </body>

</html>
